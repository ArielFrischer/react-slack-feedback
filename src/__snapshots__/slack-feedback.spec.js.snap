// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SlackFeedback should match the snapshots 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SlackFeedback
    channel="#tests"
    defaultSelectedType={null}
    disabled={false}
    emoji=":party:"
    errorTimeout={8000}
    feedbackTypes={
      Array [
        Object {
          "label": "Bug",
          "value": "bug",
        },
        Object {
          "label": "Improvement",
          "value": "improvement",
        },
        Object {
          "label": "Feature",
          "value": "feature",
        },
      ]
    }
    icon={[Function]}
    onClose={[MockFunction]}
    onImageUpload={[MockFunction]}
    onOpen={[MockFunction]}
    onSubmit={[MockFunction]}
    sentTimeout={0}
    showChannel={true}
    showIcon={true}
    theme={
      Object {
        "button": Object {
          "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
        },
        "colors": Object {
          "background": "#f4f4f7",
          "border": "#d0d8e1",
          "error": "#ec3c3c",
          "primary": "#0088ff",
          "secondary": "#222c4f",
          "success": "#3dc86f",
          "text": "#333333",
        },
        "content": Object {
          "borderRadius": "4px",
          "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
          "fontSize": "14px",
          "padding": "0.6em",
        },
        "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
        "header": Object {
          "backgroundColor": "#222c4f",
          "color": "white",
        },
        "image": Object {
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "height": "140px",
        },
        "input": Object {
          "backgroundColor": "white",
          "borderRadius": "4px",
          "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
          "color": "#444444",
          "fontSize": "14px",
          "padding": "0.5em",
        },
        "label": Object {
          "color": "#0087ff",
          "fontSize": "11px",
        },
        "loader": Object {
          "color": "#ffffff",
          "size": "4em",
          "width": "3px",
        },
        "overlay": Object {
          "backgroundColor": "rgba(34, 44, 79, 0.4)",
        },
        "tab": Object {
          "backgroundColor": "rgba(255, 255, 255, 0.5)",
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "selectedBackgroundColor": "#0087ff",
          "selectedColor": "white",
        },
        "trigger": Object {
          "backgroundColor": "#ffffff",
          "border": "none",
          "borderRadius": "30px",
          "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
          "color": "#333333",
          "fontSize": "13px",
          "fontWeight": "normal",
          "hoverBackgroundColor": "inherit",
          "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
          "hoverColor": "inherit",
          "padding": "12px 1.25em",
        },
        "uploadButton": Object {
          "backgroundColor": "white",
          "border": "1px solid #d0d8e1",
          "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
        },
      }
    }
    translations={
      Object {
        "checkbox.option": "Send url with feedback",
        "close": "close",
        "error.archived": "Channel is Archived!",
        "error.badrequest": "Bad Request!",
        "error.forbidden": "Forbidden!",
        "error.internal": "Server Error!",
        "error.notfound": "Channel Not Found!",
        "error.unexpected": "Unexpected error!",
        "error.upload": "Error uploading image!",
        "feedback.type.bug": "Bug",
        "feedback.type.feature": "Feature",
        "feedback.type.improvement": "Improvement",
        "footer.text": "React Slack Feedback",
        "header.title": "Send Feedback",
        "image.remove": "Remove",
        "label.channel": "Channel",
        "label.message": "Message",
        "label.type": "Feedback Type",
        "placeholder": "Your message...",
        "submit.sending": "Sending feedback...",
        "submit.sent": "Sent!",
        "submit.text": "Send Feedback",
        "trigger.text": "Send Feedback",
        "upload.text": "Attach Image",
      }
    }
    user="unit-tester"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <UNDEFINED
        className=""
      >
        <UNDEFINED
          className="fadeInUp"
        >
          <UNDEFINED>
            <icon />
             
            Send Feedback
            <UNDEFINED
              className="close"
              onClick={[Function]}
            >
              close
            </UNDEFINED>
          </UNDEFINED>
          <UNDEFINED>
            <span
              id="channel"
            >
              <UNDEFINED
                htmlFor="channel"
              >
                Channel
              </UNDEFINED>
              <UNDEFINED
                as="input"
                disabled={true}
                value="#tests"
              />
            </span>
            <UNDEFINED>
              Feedback Type
            </UNDEFINED>
            <UNDEFINED>
              <li
                className="selected"
                onClick={[Function]}
                title="Bug"
              >
                Bug
              </li>
              <li
                className=""
                onClick={[Function]}
                title="Improvement"
              >
                Improvement
              </li>
              <li
                className=""
                onClick={[Function]}
                title="Feature"
              >
                Feature
              </li>
            </UNDEFINED>
            <UNDEFINED>
              Message
            </UNDEFINED>
            <UNDEFINED
              as="textarea"
              name="message"
              onChange={[Function]}
              placeholder="Your message..."
              value=""
            />
            <UNDEFINED>
              <UNDEFINED
                htmlFor="imageUpload"
              >
                Attach Image
              </UNDEFINED>
              <UNDEFINED
                accept="image/*"
                as="input"
                id="imageUpload"
                onChange={[Function]}
                type="file"
              />
            </UNDEFINED>
            <UNDEFINED>
              <UNDEFINED
                checked={true}
                id="sendURL"
                onChange={[Function]}
                type="checkbox"
              />
              <UNDEFINED
                htmlFor="sendURL"
              >
                Send url with feedback
              </UNDEFINED>
            </UNDEFINED>
            <UNDEFINED
              className=""
              disabled={true}
              onClick={[Function]}
            >
              Send Feedback
            </UNDEFINED>
          </UNDEFINED>
        </UNDEFINED>
        <UNDEFINED
          className=""
          onClick={[Function]}
        >
          <icon />
           
          Send Feedback
        </UNDEFINED>
      </UNDEFINED>,
      "theme": Object {
        "button": Object {
          "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
        },
        "colors": Object {
          "background": "#f4f4f7",
          "border": "#d0d8e1",
          "error": "#ec3c3c",
          "primary": "#0088ff",
          "secondary": "#222c4f",
          "success": "#3dc86f",
          "text": "#333333",
        },
        "content": Object {
          "borderRadius": "4px",
          "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
          "fontSize": "14px",
          "padding": "0.6em",
        },
        "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
        "header": Object {
          "backgroundColor": "#222c4f",
          "color": "white",
        },
        "image": Object {
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "height": "140px",
        },
        "input": Object {
          "backgroundColor": "white",
          "borderRadius": "4px",
          "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
          "color": "#444444",
          "fontSize": "14px",
          "padding": "0.5em",
        },
        "label": Object {
          "color": "#0087ff",
          "fontSize": "11px",
        },
        "loader": Object {
          "color": "#ffffff",
          "size": "4em",
          "width": "3px",
        },
        "overlay": Object {
          "backgroundColor": "rgba(34, 44, 79, 0.4)",
        },
        "tab": Object {
          "backgroundColor": "rgba(255, 255, 255, 0.5)",
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "selectedBackgroundColor": "#0087ff",
          "selectedColor": "white",
        },
        "trigger": Object {
          "backgroundColor": "#ffffff",
          "border": "none",
          "borderRadius": "30px",
          "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
          "color": "#333333",
          "fontSize": "13px",
          "fontWeight": "normal",
          "hoverBackgroundColor": "inherit",
          "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
          "hoverColor": "inherit",
          "padding": "12px 1.25em",
        },
        "uploadButton": Object {
          "backgroundColor": "white",
          "border": "1px solid #d0d8e1",
          "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
        },
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <UNDEFINED
            className="fadeInUp"
          >
            <UNDEFINED>
              <icon />
               
              Send Feedback
              <UNDEFINED
                className="close"
                onClick={[Function]}
              >
                close
              </UNDEFINED>
            </UNDEFINED>
            <UNDEFINED>
              <span
                id="channel"
              >
                <UNDEFINED
                  htmlFor="channel"
                >
                  Channel
                </UNDEFINED>
                <UNDEFINED
                  as="input"
                  disabled={true}
                  value="#tests"
                />
              </span>
              <UNDEFINED>
                Feedback Type
              </UNDEFINED>
              <UNDEFINED>
                <li
                  className="selected"
                  onClick={[Function]}
                  title="Bug"
                >
                  Bug
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Improvement"
                >
                  Improvement
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Feature"
                >
                  Feature
                </li>
              </UNDEFINED>
              <UNDEFINED>
                Message
              </UNDEFINED>
              <UNDEFINED
                as="textarea"
                name="message"
                onChange={[Function]}
                placeholder="Your message..."
                value=""
              />
              <UNDEFINED>
                <UNDEFINED
                  htmlFor="imageUpload"
                >
                  Attach Image
                </UNDEFINED>
                <UNDEFINED
                  accept="image/*"
                  as="input"
                  id="imageUpload"
                  onChange={[Function]}
                  type="file"
                />
              </UNDEFINED>
              <UNDEFINED>
                <UNDEFINED
                  checked={true}
                  id="sendURL"
                  onChange={[Function]}
                  type="checkbox"
                />
                <UNDEFINED
                  htmlFor="sendURL"
                >
                  Send url with feedback
                </UNDEFINED>
              </UNDEFINED>
              <UNDEFINED
                className=""
                disabled={true}
                onClick={[Function]}
              >
                Send Feedback
              </UNDEFINED>
            </UNDEFINED>
          </UNDEFINED>,
          <UNDEFINED
            className=""
            onClick={[Function]}
          >
            <icon />
             
            Send Feedback
          </UNDEFINED>,
        ],
        "className": "",
      },
      "ref": Object {
        "current": null,
      },
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <UNDEFINED>
                <icon />
                 
                Send Feedback
                <UNDEFINED
                  className="close"
                  onClick={[Function]}
                >
                  close
                </UNDEFINED>
              </UNDEFINED>,
              <UNDEFINED>
                <span
                  id="channel"
                >
                  <UNDEFINED
                    htmlFor="channel"
                  >
                    Channel
                  </UNDEFINED>
                  <UNDEFINED
                    as="input"
                    disabled={true}
                    value="#tests"
                  />
                </span>
                <UNDEFINED>
                  Feedback Type
                </UNDEFINED>
                <UNDEFINED>
                  <li
                    className="selected"
                    onClick={[Function]}
                    title="Bug"
                  >
                    Bug
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Improvement"
                  >
                    Improvement
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Feature"
                  >
                    Feature
                  </li>
                </UNDEFINED>
                <UNDEFINED>
                  Message
                </UNDEFINED>
                <UNDEFINED
                  as="textarea"
                  name="message"
                  onChange={[Function]}
                  placeholder="Your message..."
                  value=""
                />
                <UNDEFINED>
                  <UNDEFINED
                    htmlFor="imageUpload"
                  >
                    Attach Image
                  </UNDEFINED>
                  <UNDEFINED
                    accept="image/*"
                    as="input"
                    id="imageUpload"
                    onChange={[Function]}
                    type="file"
                  />
                </UNDEFINED>
                <UNDEFINED>
                  <UNDEFINED
                    checked={true}
                    id="sendURL"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <UNDEFINED
                    htmlFor="sendURL"
                  >
                    Send url with feedback
                  </UNDEFINED>
                </UNDEFINED>
                <UNDEFINED
                  className=""
                  disabled={true}
                  onClick={[Function]}
                >
                  Send Feedback
                </UNDEFINED>
              </UNDEFINED>,
            ],
            "className": "fadeInUp",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <icon />,
                  " ",
                  "Send Feedback",
                  <UNDEFINED
                    className="close"
                    onClick={[Function]}
                  >
                    close
                  </UNDEFINED>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                " ",
                "Send Feedback",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "close",
                    "className": "close",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "close",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__CloseButton-kxzKQm",
                      "isStatic": true,
                      "rules": Array [
                        "cursor:pointer;opacity:0.7;margin-left:auto;font-size:11px;&:hover{opacity:1;}",
                      ],
                    },
                    "displayName": "styles__CloseButton",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__CloseButton-kxzKQm",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "styles__Header-gpCiqM",
                  "isStatic": false,
                  "rules": Array [
                    "display:flex;color:",
                    [Function],
                    ";background:",
                    [Function],
                    ";padding:0.75em 1em;border-radius:3px 3px 0 0;font-size:14px;font-weight:300;align-items:center;> img{margin-right:0.5em;}",
                  ],
                },
                "displayName": "styles__Header",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "styles__Header-gpCiqM",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <span
                    id="channel"
                  >
                    <UNDEFINED
                      htmlFor="channel"
                    >
                      Channel
                    </UNDEFINED>
                    <UNDEFINED
                      as="input"
                      disabled={true}
                      value="#tests"
                    />
                  </span>,
                  <UNDEFINED>
                    Feedback Type
                  </UNDEFINED>,
                  <UNDEFINED>
                    <li
                      className="selected"
                      onClick={[Function]}
                      title="Bug"
                    >
                      Bug
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Improvement"
                    >
                      Improvement
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Feature"
                    >
                      Feature
                    </li>
                  </UNDEFINED>,
                  <UNDEFINED>
                    Message
                  </UNDEFINED>,
                  <UNDEFINED
                    as="textarea"
                    name="message"
                    onChange={[Function]}
                    placeholder="Your message..."
                    value=""
                  />,
                  <UNDEFINED>
                    <UNDEFINED
                      htmlFor="imageUpload"
                    >
                      Attach Image
                    </UNDEFINED>
                    <UNDEFINED
                      accept="image/*"
                      as="input"
                      id="imageUpload"
                      onChange={[Function]}
                      type="file"
                    />
                  </UNDEFINED>,
                  <UNDEFINED>
                    <UNDEFINED
                      checked={true}
                      id="sendURL"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    <UNDEFINED
                      htmlFor="sendURL"
                    >
                      Send url with feedback
                    </UNDEFINED>
                  </UNDEFINED>,
                  <UNDEFINED
                    className=""
                    disabled={true}
                    onClick={[Function]}
                  >
                    Send Feedback
                  </UNDEFINED>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <UNDEFINED
                        htmlFor="channel"
                      >
                        Channel
                      </UNDEFINED>,
                      <UNDEFINED
                        as="input"
                        disabled={true}
                        value="#tests"
                      />,
                    ],
                    "id": "channel",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Channel",
                        "htmlFor": "channel",
                      },
                      "ref": null,
                      "rendered": "Channel",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__Label-eHLCPc",
                          "isStatic": false,
                          "rules": Array [
                            "color:",
                            [Function],
                            ";display:block;font-size:",
                            [Function],
                            ";margin:5px 0;",
                          ],
                        },
                        "displayName": "styles__Label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__Label-eHLCPc",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "as": "input",
                        "disabled": true,
                        "value": "#tests",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__FormElement-bDQwuf",
                          "isStatic": false,
                          "rules": Array [
                            "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                            ";box-sizing:border-box;",
                            ";width:100%;color:",
                            [Function],
                            ";border:",
                            [Function],
                            ";border-radius:",
                            [Function],
                            ";padding:",
                            [Function],
                            ";font-size:",
                            [Function],
                            ";background:",
                            [Function],
                            ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                            [Function],
                            ";box-shadow:",
                            [Function],
                            ";}&[disabled],&.disabled{background:",
                            [Function],
                            ";pointer-events:none;color:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "styles__FormElement",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__FormElement-bDQwuf",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Feedback Type",
                  },
                  "ref": null,
                  "rendered": "Feedback Type",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__Label-eHLCPc",
                      "isStatic": false,
                      "rules": Array [
                        "color:",
                        [Function],
                        ";display:block;font-size:",
                        [Function],
                        ";margin:5px 0;",
                      ],
                    },
                    "displayName": "styles__Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__Label-eHLCPc",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <li
                        className="selected"
                        onClick={[Function]}
                        title="Bug"
                      >
                        Bug
                      </li>,
                      <li
                        className=""
                        onClick={[Function]}
                        title="Improvement"
                      >
                        Improvement
                      </li>,
                      <li
                        className=""
                        onClick={[Function]}
                        title="Feature"
                      >
                        Feature
                      </li>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": "bug",
                      "nodeType": "host",
                      "props": Object {
                        "children": "Bug",
                        "className": "selected",
                        "onClick": [Function],
                        "title": "Bug",
                      },
                      "ref": null,
                      "rendered": "Bug",
                      "type": "li",
                    },
                    Object {
                      "instance": null,
                      "key": "improvement",
                      "nodeType": "host",
                      "props": Object {
                        "children": "Improvement",
                        "className": "",
                        "onClick": [Function],
                        "title": "Improvement",
                      },
                      "ref": null,
                      "rendered": "Improvement",
                      "type": "li",
                    },
                    Object {
                      "instance": null,
                      "key": "feature",
                      "nodeType": "host",
                      "props": Object {
                        "children": "Feature",
                        "className": "",
                        "onClick": [Function],
                        "title": "Feature",
                      },
                      "ref": null,
                      "rendered": "Feature",
                      "type": "li",
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__Tabs-dAptag",
                      "isStatic": false,
                      "rules": Array [
                        "display:flex;list-style:none;padding:0;margin:0;margin-bottom:1em;> li{flex:1 0 calc(100% / 3);user-select:none;background:",
                        [Function],
                        ";color:",
                        [Function],
                        ";text-align:center;padding:0.75em;font-size:13px;cursor:pointer;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border:",
                        [Function],
                        ";&.selected{border-color:",
                        [Function],
                        ";background:",
                        [Function],
                        ";color:white;position:relative;}&:hover:not(.selected){border:",
                        [Function],
                        ";}&:first-of-type{border-radius:4px 0 0 4px;margin-right:-1px;}&:last-of-type{border-radius:0 4px 4px 0;margin-left:-1px;}}",
                      ],
                    },
                    "displayName": "styles__Tabs",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__Tabs-dAptag",
                    "target": "ul",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Message",
                  },
                  "ref": null,
                  "rendered": "Message",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__Label-eHLCPc",
                      "isStatic": false,
                      "rules": Array [
                        "color:",
                        [Function],
                        ";display:block;font-size:",
                        [Function],
                        ";margin:5px 0;",
                      ],
                    },
                    "displayName": "styles__Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__Label-eHLCPc",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "as": "textarea",
                    "name": "message",
                    "onChange": [Function],
                    "placeholder": "Your message...",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__FormElement-bDQwuf",
                      "isStatic": false,
                      "rules": Array [
                        "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                        ";box-sizing:border-box;",
                        ";width:100%;color:",
                        [Function],
                        ";border:",
                        [Function],
                        ";border-radius:",
                        [Function],
                        ";padding:",
                        [Function],
                        ";font-size:",
                        [Function],
                        ";background:",
                        [Function],
                        ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                        [Function],
                        ";box-shadow:",
                        [Function],
                        ";}&[disabled],&.disabled{background:",
                        [Function],
                        ";pointer-events:none;color:",
                        [Function],
                        ";}",
                      ],
                    },
                    "displayName": "styles__FormElement",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__FormElement-bDQwuf",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <UNDEFINED
                        htmlFor="imageUpload"
                      >
                        Attach Image
                      </UNDEFINED>,
                      <UNDEFINED
                        accept="image/*"
                        as="input"
                        id="imageUpload"
                        onChange={[Function]}
                        type="file"
                      />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Attach Image",
                        "htmlFor": "imageUpload",
                      },
                      "ref": null,
                      "rendered": "Attach Image",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__UploadButton-dKkAQc",
                          "isStatic": false,
                          "rules": Array [
                            "color:",
                            [Function],
                            ";background:",
                            [Function],
                            ";border:",
                            [Function],
                            ";padding:0.75em 3em;text-align:center;font-size:",
                            [Function],
                            ";margin:auto;width:100%;display:table;cursor:pointer;border-radius:4px;&:hover{background:",
                            [Function],
                            ";color:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "styles__UploadButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__UploadButton-dKkAQc",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "accept": "image/*",
                        "as": "input",
                        "id": "imageUpload",
                        "onChange": [Function],
                        "type": "file",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__FormElement-bDQwuf",
                          "isStatic": false,
                          "rules": Array [
                            "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                            ";box-sizing:border-box;",
                            ";width:100%;color:",
                            [Function],
                            ";border:",
                            [Function],
                            ";border-radius:",
                            [Function],
                            ";padding:",
                            [Function],
                            ";font-size:",
                            [Function],
                            ";background:",
                            [Function],
                            ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                            [Function],
                            ";box-shadow:",
                            [Function],
                            ";}&[disabled],&.disabled{background:",
                            [Function],
                            ";pointer-events:none;color:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "styles__FormElement",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__FormElement-bDQwuf",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__ImageUpload-jMrDzo",
                      "isStatic": true,
                      "rules": Array [
                        "> input{display:none;}",
                      ],
                    },
                    "displayName": "styles__ImageUpload",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__ImageUpload-jMrDzo",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <UNDEFINED
                        checked={true}
                        id="sendURL"
                        onChange={[Function]}
                        type="checkbox"
                      />,
                      <UNDEFINED
                        htmlFor="sendURL"
                      >
                        Send url with feedback
                      </UNDEFINED>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "checked": true,
                        "id": "sendURL",
                        "onChange": [Function],
                        "type": "checkbox",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__Checkbox-gDImgc",
                          "isStatic": true,
                          "rules": Array [
                            "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                            ";box-sizing:border-box;",
                            ";appearance:checkbox;position:static;font-size:1.1em;&::before,&::after{content:none;}",
                          ],
                        },
                        "displayName": "styles__Checkbox",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__Checkbox-gDImgc",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Send url with feedback",
                        "htmlFor": "sendURL",
                      },
                      "ref": null,
                      "rendered": "Send url with feedback",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__CheckboxLabel-iljvce",
                          "isStatic": true,
                          "rules": Array [
                            "display:inline-block;margin-left:10px;color:inherit;font-size:13px;color:#858ba0;cursor:pointer;&:hover{color:#858ba0;}",
                          ],
                        },
                        "displayName": "styles__CheckboxLabel",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__CheckboxLabel-iljvce",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__CheckboxContainer-ESvur",
                      "isStatic": true,
                      "rules": Array [
                        "padding:0.5em 0 1em;",
                      ],
                    },
                    "displayName": "styles__CheckboxContainer",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__CheckboxContainer-ESvur",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Send Feedback",
                    "className": "",
                    "disabled": true,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Send Feedback",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__SubmitButton-hvIGQG",
                      "isStatic": false,
                      "rules": Array [
                        "display:block;width:100%;padding:1em 0.75em;text-align:center;background:",
                        [Function],
                        ";color:white;font-weight:400;outline:none;border:none;font-size:11px;text-transform:uppercase;letter-spacing:0.5px;border-radius:4px;cursor:pointer;transition:background 0.2s,box-shadow 0.2s;&[disabled],&.disabled{pointer-events:none;opacity:0.8;}&.sent{background:",
                        [Function],
                        ";pointer-events:none;opacity:1;}&.error{background:",
                        [Function],
                        ";pointer-events:none;opacity:1;}&:hover{background:",
                        [Function],
                        ";box-shadow:none;}",
                      ],
                    },
                    "displayName": "styles__SubmitButton",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__SubmitButton-hvIGQG",
                    "target": "button",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "styles__Content-ikKqwP",
                  "isStatic": false,
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "styles__Content",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "styles__Content-ikKqwP",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styles__Container-kwWyMt",
              "isStatic": false,
              "rules": Array [
                "display:none;background:",
                [Function],
                ";position:relative;z-index:999999999;border-radius:4px;margin-bottom:1.5em;width:",
                [Function],
                ";top:-2.5em;right:0;box-shadow:",
                [Function],
                ";",
                "animation:",
                Keyframes {
                  "id": "sc-keyframes-cryAyx",
                  "inject": [Function],
                  "name": "cryAyx",
                  "rules": Array [
                    "@-webkit-keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                    "@keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                  ],
                  "toString": [Function],
                },
                " 0.4s ease;animation-fill-mode:both;",
                ";&.active{",
                "animation:",
                Keyframes {
                  "id": "sc-keyframes-QWJjr",
                  "inject": [Function],
                  "name": "QWJjr",
                  "rules": Array [
                    "@-webkit-keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                    "@keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                  ],
                  "toString": [Function],
                },
                " 0.4s ease;animation-fill-mode:both;",
                ";display:block;}",
              ],
            },
            "displayName": "styles__Container",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styles__Container-kwWyMt",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <icon />,
              " ",
              "Send Feedback",
            ],
            "className": "",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            " ",
            "Send Feedback",
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styles__Trigger-jTszNK",
              "isStatic": false,
              "rules": Array [
                "display:flex;align-items:center;position:absolute;right:0;bottom:0;align-items:center;font-weight:",
                [Function],
                ";background:",
                [Function],
                ";color:",
                [Function],
                ";border:1px solid ",
                [Function],
                ";white-space:nowrap;padding:",
                [Function],
                ";border-radius:",
                [Function],
                ";cursor:pointer;font-size:",
                [Function],
                ";box-shadow:",
                [Function],
                ";transition:box-shadow 0.3s,transform 0.2s ease-in,color 0.2s;&:hover{box-shadow:",
                [Function],
                ";background-color:",
                [Function],
                " transform:translateY(-1px);color:",
                [Function],
                ";border-color:",
                [Function],
                ";}img{margin-right:8px;}",
              ],
            },
            "displayName": "styles__Trigger",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styles__Trigger-jTszNK",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "styles__SlackFeedback-bbGQkf",
          "isStatic": false,
          "rules": Array [
            "position:fixed;font-family:",
            [Function],
            ";z-index:99999998;bottom:12px;right:0;margin:1em;*{box-sizing:border-box;}textarea{min-height:150px;}",
          ],
        },
        "displayName": "styles__SlackFeedback",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "styles__SlackFeedback-bbGQkf",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <UNDEFINED
          className=""
        >
          <UNDEFINED
            className="fadeInUp"
          >
            <UNDEFINED>
              <icon />
               
              Send Feedback
              <UNDEFINED
                className="close"
                onClick={[Function]}
              >
                close
              </UNDEFINED>
            </UNDEFINED>
            <UNDEFINED>
              <span
                id="channel"
              >
                <UNDEFINED
                  htmlFor="channel"
                >
                  Channel
                </UNDEFINED>
                <UNDEFINED
                  as="input"
                  disabled={true}
                  value="#tests"
                />
              </span>
              <UNDEFINED>
                Feedback Type
              </UNDEFINED>
              <UNDEFINED>
                <li
                  className="selected"
                  onClick={[Function]}
                  title="Bug"
                >
                  Bug
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Improvement"
                >
                  Improvement
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Feature"
                >
                  Feature
                </li>
              </UNDEFINED>
              <UNDEFINED>
                Message
              </UNDEFINED>
              <UNDEFINED
                as="textarea"
                name="message"
                onChange={[Function]}
                placeholder="Your message..."
                value=""
              />
              <UNDEFINED>
                <UNDEFINED
                  htmlFor="imageUpload"
                >
                  Attach Image
                </UNDEFINED>
                <UNDEFINED
                  accept="image/*"
                  as="input"
                  id="imageUpload"
                  onChange={[Function]}
                  type="file"
                />
              </UNDEFINED>
              <UNDEFINED>
                <UNDEFINED
                  checked={true}
                  id="sendURL"
                  onChange={[Function]}
                  type="checkbox"
                />
                <UNDEFINED
                  htmlFor="sendURL"
                >
                  Send url with feedback
                </UNDEFINED>
              </UNDEFINED>
              <UNDEFINED
                className=""
                disabled={true}
                onClick={[Function]}
              >
                Send Feedback
              </UNDEFINED>
            </UNDEFINED>
          </UNDEFINED>
          <UNDEFINED
            className=""
            onClick={[Function]}
          >
            <icon />
             
            Send Feedback
          </UNDEFINED>
        </UNDEFINED>,
        "theme": Object {
          "button": Object {
            "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
          },
          "colors": Object {
            "background": "#f4f4f7",
            "border": "#d0d8e1",
            "error": "#ec3c3c",
            "primary": "#0088ff",
            "secondary": "#222c4f",
            "success": "#3dc86f",
            "text": "#333333",
          },
          "content": Object {
            "borderRadius": "4px",
            "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
            "fontSize": "14px",
            "padding": "0.6em",
          },
          "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
          "header": Object {
            "backgroundColor": "#222c4f",
            "color": "white",
          },
          "image": Object {
            "border": "1px solid #d0d8e1",
            "borderRadius": "4px",
            "height": "140px",
          },
          "input": Object {
            "backgroundColor": "white",
            "borderRadius": "4px",
            "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
            "color": "#444444",
            "fontSize": "14px",
            "padding": "0.5em",
          },
          "label": Object {
            "color": "#0087ff",
            "fontSize": "11px",
          },
          "loader": Object {
            "color": "#ffffff",
            "size": "4em",
            "width": "3px",
          },
          "overlay": Object {
            "backgroundColor": "rgba(34, 44, 79, 0.4)",
          },
          "tab": Object {
            "backgroundColor": "rgba(255, 255, 255, 0.5)",
            "border": "1px solid #d0d8e1",
            "borderRadius": "4px",
            "selectedBackgroundColor": "#0087ff",
            "selectedColor": "white",
          },
          "trigger": Object {
            "backgroundColor": "#ffffff",
            "border": "none",
            "borderRadius": "30px",
            "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
            "color": "#333333",
            "fontSize": "13px",
            "fontWeight": "normal",
            "hoverBackgroundColor": "inherit",
            "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
            "hoverColor": "inherit",
            "padding": "12px 1.25em",
          },
          "uploadButton": Object {
            "backgroundColor": "white",
            "border": "1px solid #d0d8e1",
            "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
          },
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <UNDEFINED
              className="fadeInUp"
            >
              <UNDEFINED>
                <icon />
                 
                Send Feedback
                <UNDEFINED
                  className="close"
                  onClick={[Function]}
                >
                  close
                </UNDEFINED>
              </UNDEFINED>
              <UNDEFINED>
                <span
                  id="channel"
                >
                  <UNDEFINED
                    htmlFor="channel"
                  >
                    Channel
                  </UNDEFINED>
                  <UNDEFINED
                    as="input"
                    disabled={true}
                    value="#tests"
                  />
                </span>
                <UNDEFINED>
                  Feedback Type
                </UNDEFINED>
                <UNDEFINED>
                  <li
                    className="selected"
                    onClick={[Function]}
                    title="Bug"
                  >
                    Bug
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Improvement"
                  >
                    Improvement
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Feature"
                  >
                    Feature
                  </li>
                </UNDEFINED>
                <UNDEFINED>
                  Message
                </UNDEFINED>
                <UNDEFINED
                  as="textarea"
                  name="message"
                  onChange={[Function]}
                  placeholder="Your message..."
                  value=""
                />
                <UNDEFINED>
                  <UNDEFINED
                    htmlFor="imageUpload"
                  >
                    Attach Image
                  </UNDEFINED>
                  <UNDEFINED
                    accept="image/*"
                    as="input"
                    id="imageUpload"
                    onChange={[Function]}
                    type="file"
                  />
                </UNDEFINED>
                <UNDEFINED>
                  <UNDEFINED
                    checked={true}
                    id="sendURL"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <UNDEFINED
                    htmlFor="sendURL"
                  >
                    Send url with feedback
                  </UNDEFINED>
                </UNDEFINED>
                <UNDEFINED
                  className=""
                  disabled={true}
                  onClick={[Function]}
                >
                  Send Feedback
                </UNDEFINED>
              </UNDEFINED>
            </UNDEFINED>,
            <UNDEFINED
              className=""
              onClick={[Function]}
            >
              <icon />
               
              Send Feedback
            </UNDEFINED>,
          ],
          "className": "",
        },
        "ref": Object {
          "current": null,
        },
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <UNDEFINED>
                  <icon />
                   
                  Send Feedback
                  <UNDEFINED
                    className="close"
                    onClick={[Function]}
                  >
                    close
                  </UNDEFINED>
                </UNDEFINED>,
                <UNDEFINED>
                  <span
                    id="channel"
                  >
                    <UNDEFINED
                      htmlFor="channel"
                    >
                      Channel
                    </UNDEFINED>
                    <UNDEFINED
                      as="input"
                      disabled={true}
                      value="#tests"
                    />
                  </span>
                  <UNDEFINED>
                    Feedback Type
                  </UNDEFINED>
                  <UNDEFINED>
                    <li
                      className="selected"
                      onClick={[Function]}
                      title="Bug"
                    >
                      Bug
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Improvement"
                    >
                      Improvement
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Feature"
                    >
                      Feature
                    </li>
                  </UNDEFINED>
                  <UNDEFINED>
                    Message
                  </UNDEFINED>
                  <UNDEFINED
                    as="textarea"
                    name="message"
                    onChange={[Function]}
                    placeholder="Your message..."
                    value=""
                  />
                  <UNDEFINED>
                    <UNDEFINED
                      htmlFor="imageUpload"
                    >
                      Attach Image
                    </UNDEFINED>
                    <UNDEFINED
                      accept="image/*"
                      as="input"
                      id="imageUpload"
                      onChange={[Function]}
                      type="file"
                    />
                  </UNDEFINED>
                  <UNDEFINED>
                    <UNDEFINED
                      checked={true}
                      id="sendURL"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    <UNDEFINED
                      htmlFor="sendURL"
                    >
                      Send url with feedback
                    </UNDEFINED>
                  </UNDEFINED>
                  <UNDEFINED
                    className=""
                    disabled={true}
                    onClick={[Function]}
                  >
                    Send Feedback
                  </UNDEFINED>
                </UNDEFINED>,
              ],
              "className": "fadeInUp",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <icon />,
                    " ",
                    "Send Feedback",
                    <UNDEFINED
                      className="close"
                      onClick={[Function]}
                    >
                      close
                    </UNDEFINED>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  " ",
                  "Send Feedback",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "close",
                      "className": "close",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "close",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__CloseButton-kxzKQm",
                        "isStatic": true,
                        "rules": Array [
                          "cursor:pointer;opacity:0.7;margin-left:auto;font-size:11px;&:hover{opacity:1;}",
                        ],
                      },
                      "displayName": "styles__CloseButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__CloseButton-kxzKQm",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "styles__Header-gpCiqM",
                    "isStatic": false,
                    "rules": Array [
                      "display:flex;color:",
                      [Function],
                      ";background:",
                      [Function],
                      ";padding:0.75em 1em;border-radius:3px 3px 0 0;font-size:14px;font-weight:300;align-items:center;> img{margin-right:0.5em;}",
                    ],
                  },
                  "displayName": "styles__Header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "styles__Header-gpCiqM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <span
                      id="channel"
                    >
                      <UNDEFINED
                        htmlFor="channel"
                      >
                        Channel
                      </UNDEFINED>
                      <UNDEFINED
                        as="input"
                        disabled={true}
                        value="#tests"
                      />
                    </span>,
                    <UNDEFINED>
                      Feedback Type
                    </UNDEFINED>,
                    <UNDEFINED>
                      <li
                        className="selected"
                        onClick={[Function]}
                        title="Bug"
                      >
                        Bug
                      </li>
                      <li
                        className=""
                        onClick={[Function]}
                        title="Improvement"
                      >
                        Improvement
                      </li>
                      <li
                        className=""
                        onClick={[Function]}
                        title="Feature"
                      >
                        Feature
                      </li>
                    </UNDEFINED>,
                    <UNDEFINED>
                      Message
                    </UNDEFINED>,
                    <UNDEFINED
                      as="textarea"
                      name="message"
                      onChange={[Function]}
                      placeholder="Your message..."
                      value=""
                    />,
                    <UNDEFINED>
                      <UNDEFINED
                        htmlFor="imageUpload"
                      >
                        Attach Image
                      </UNDEFINED>
                      <UNDEFINED
                        accept="image/*"
                        as="input"
                        id="imageUpload"
                        onChange={[Function]}
                        type="file"
                      />
                    </UNDEFINED>,
                    <UNDEFINED>
                      <UNDEFINED
                        checked={true}
                        id="sendURL"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <UNDEFINED
                        htmlFor="sendURL"
                      >
                        Send url with feedback
                      </UNDEFINED>
                    </UNDEFINED>,
                    <UNDEFINED
                      className=""
                      disabled={true}
                      onClick={[Function]}
                    >
                      Send Feedback
                    </UNDEFINED>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <UNDEFINED
                          htmlFor="channel"
                        >
                          Channel
                        </UNDEFINED>,
                        <UNDEFINED
                          as="input"
                          disabled={true}
                          value="#tests"
                        />,
                      ],
                      "id": "channel",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Channel",
                          "htmlFor": "channel",
                        },
                        "ref": null,
                        "rendered": "Channel",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__Label-eHLCPc",
                            "isStatic": false,
                            "rules": Array [
                              "color:",
                              [Function],
                              ";display:block;font-size:",
                              [Function],
                              ";margin:5px 0;",
                            ],
                          },
                          "displayName": "styles__Label",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__Label-eHLCPc",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": "input",
                          "disabled": true,
                          "value": "#tests",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__FormElement-bDQwuf",
                            "isStatic": false,
                            "rules": Array [
                              "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                              ";box-sizing:border-box;",
                              ";width:100%;color:",
                              [Function],
                              ";border:",
                              [Function],
                              ";border-radius:",
                              [Function],
                              ";padding:",
                              [Function],
                              ";font-size:",
                              [Function],
                              ";background:",
                              [Function],
                              ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                              [Function],
                              ";box-shadow:",
                              [Function],
                              ";}&[disabled],&.disabled{background:",
                              [Function],
                              ";pointer-events:none;color:",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "styles__FormElement",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__FormElement-bDQwuf",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": "span",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Feedback Type",
                    },
                    "ref": null,
                    "rendered": "Feedback Type",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Label-eHLCPc",
                        "isStatic": false,
                        "rules": Array [
                          "color:",
                          [Function],
                          ";display:block;font-size:",
                          [Function],
                          ";margin:5px 0;",
                        ],
                      },
                      "displayName": "styles__Label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Label-eHLCPc",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <li
                          className="selected"
                          onClick={[Function]}
                          title="Bug"
                        >
                          Bug
                        </li>,
                        <li
                          className=""
                          onClick={[Function]}
                          title="Improvement"
                        >
                          Improvement
                        </li>,
                        <li
                          className=""
                          onClick={[Function]}
                          title="Feature"
                        >
                          Feature
                        </li>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": "bug",
                        "nodeType": "host",
                        "props": Object {
                          "children": "Bug",
                          "className": "selected",
                          "onClick": [Function],
                          "title": "Bug",
                        },
                        "ref": null,
                        "rendered": "Bug",
                        "type": "li",
                      },
                      Object {
                        "instance": null,
                        "key": "improvement",
                        "nodeType": "host",
                        "props": Object {
                          "children": "Improvement",
                          "className": "",
                          "onClick": [Function],
                          "title": "Improvement",
                        },
                        "ref": null,
                        "rendered": "Improvement",
                        "type": "li",
                      },
                      Object {
                        "instance": null,
                        "key": "feature",
                        "nodeType": "host",
                        "props": Object {
                          "children": "Feature",
                          "className": "",
                          "onClick": [Function],
                          "title": "Feature",
                        },
                        "ref": null,
                        "rendered": "Feature",
                        "type": "li",
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Tabs-dAptag",
                        "isStatic": false,
                        "rules": Array [
                          "display:flex;list-style:none;padding:0;margin:0;margin-bottom:1em;> li{flex:1 0 calc(100% / 3);user-select:none;background:",
                          [Function],
                          ";color:",
                          [Function],
                          ";text-align:center;padding:0.75em;font-size:13px;cursor:pointer;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border:",
                          [Function],
                          ";&.selected{border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";color:white;position:relative;}&:hover:not(.selected){border:",
                          [Function],
                          ";}&:first-of-type{border-radius:4px 0 0 4px;margin-right:-1px;}&:last-of-type{border-radius:0 4px 4px 0;margin-left:-1px;}}",
                        ],
                      },
                      "displayName": "styles__Tabs",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Tabs-dAptag",
                      "target": "ul",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Message",
                    },
                    "ref": null,
                    "rendered": "Message",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Label-eHLCPc",
                        "isStatic": false,
                        "rules": Array [
                          "color:",
                          [Function],
                          ";display:block;font-size:",
                          [Function],
                          ";margin:5px 0;",
                        ],
                      },
                      "displayName": "styles__Label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Label-eHLCPc",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "as": "textarea",
                      "name": "message",
                      "onChange": [Function],
                      "placeholder": "Your message...",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__FormElement-bDQwuf",
                        "isStatic": false,
                        "rules": Array [
                          "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                          ";box-sizing:border-box;",
                          ";width:100%;color:",
                          [Function],
                          ";border:",
                          [Function],
                          ";border-radius:",
                          [Function],
                          ";padding:",
                          [Function],
                          ";font-size:",
                          [Function],
                          ";background:",
                          [Function],
                          ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                          [Function],
                          ";box-shadow:",
                          [Function],
                          ";}&[disabled],&.disabled{background:",
                          [Function],
                          ";pointer-events:none;color:",
                          [Function],
                          ";}",
                        ],
                      },
                      "displayName": "styles__FormElement",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__FormElement-bDQwuf",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <UNDEFINED
                          htmlFor="imageUpload"
                        >
                          Attach Image
                        </UNDEFINED>,
                        <UNDEFINED
                          accept="image/*"
                          as="input"
                          id="imageUpload"
                          onChange={[Function]}
                          type="file"
                        />,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Attach Image",
                          "htmlFor": "imageUpload",
                        },
                        "ref": null,
                        "rendered": "Attach Image",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__UploadButton-dKkAQc",
                            "isStatic": false,
                            "rules": Array [
                              "color:",
                              [Function],
                              ";background:",
                              [Function],
                              ";border:",
                              [Function],
                              ";padding:0.75em 3em;text-align:center;font-size:",
                              [Function],
                              ";margin:auto;width:100%;display:table;cursor:pointer;border-radius:4px;&:hover{background:",
                              [Function],
                              ";color:",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "styles__UploadButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__UploadButton-dKkAQc",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "accept": "image/*",
                          "as": "input",
                          "id": "imageUpload",
                          "onChange": [Function],
                          "type": "file",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__FormElement-bDQwuf",
                            "isStatic": false,
                            "rules": Array [
                              "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                              ";box-sizing:border-box;",
                              ";width:100%;color:",
                              [Function],
                              ";border:",
                              [Function],
                              ";border-radius:",
                              [Function],
                              ";padding:",
                              [Function],
                              ";font-size:",
                              [Function],
                              ";background:",
                              [Function],
                              ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                              [Function],
                              ";box-shadow:",
                              [Function],
                              ";}&[disabled],&.disabled{background:",
                              [Function],
                              ";pointer-events:none;color:",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "styles__FormElement",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__FormElement-bDQwuf",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__ImageUpload-jMrDzo",
                        "isStatic": true,
                        "rules": Array [
                          "> input{display:none;}",
                        ],
                      },
                      "displayName": "styles__ImageUpload",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__ImageUpload-jMrDzo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <UNDEFINED
                          checked={true}
                          id="sendURL"
                          onChange={[Function]}
                          type="checkbox"
                        />,
                        <UNDEFINED
                          htmlFor="sendURL"
                        >
                          Send url with feedback
                        </UNDEFINED>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "checked": true,
                          "id": "sendURL",
                          "onChange": [Function],
                          "type": "checkbox",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__Checkbox-gDImgc",
                            "isStatic": true,
                            "rules": Array [
                              "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                              ";box-sizing:border-box;",
                              ";appearance:checkbox;position:static;font-size:1.1em;&::before,&::after{content:none;}",
                            ],
                          },
                          "displayName": "styles__Checkbox",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__Checkbox-gDImgc",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Send url with feedback",
                          "htmlFor": "sendURL",
                        },
                        "ref": null,
                        "rendered": "Send url with feedback",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__CheckboxLabel-iljvce",
                            "isStatic": true,
                            "rules": Array [
                              "display:inline-block;margin-left:10px;color:inherit;font-size:13px;color:#858ba0;cursor:pointer;&:hover{color:#858ba0;}",
                            ],
                          },
                          "displayName": "styles__CheckboxLabel",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__CheckboxLabel-iljvce",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__CheckboxContainer-ESvur",
                        "isStatic": true,
                        "rules": Array [
                          "padding:0.5em 0 1em;",
                        ],
                      },
                      "displayName": "styles__CheckboxContainer",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__CheckboxContainer-ESvur",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Send Feedback",
                      "className": "",
                      "disabled": true,
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Send Feedback",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__SubmitButton-hvIGQG",
                        "isStatic": false,
                        "rules": Array [
                          "display:block;width:100%;padding:1em 0.75em;text-align:center;background:",
                          [Function],
                          ";color:white;font-weight:400;outline:none;border:none;font-size:11px;text-transform:uppercase;letter-spacing:0.5px;border-radius:4px;cursor:pointer;transition:background 0.2s,box-shadow 0.2s;&[disabled],&.disabled{pointer-events:none;opacity:0.8;}&.sent{background:",
                          [Function],
                          ";pointer-events:none;opacity:1;}&.error{background:",
                          [Function],
                          ";pointer-events:none;opacity:1;}&:hover{background:",
                          [Function],
                          ";box-shadow:none;}",
                        ],
                      },
                      "displayName": "styles__SubmitButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__SubmitButton-hvIGQG",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "styles__Content-ikKqwP",
                    "isStatic": false,
                    "rules": Array [
                      "padding:",
                      [Function],
                      ";",
                    ],
                  },
                  "displayName": "styles__Content",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "styles__Content-ikKqwP",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styles__Container-kwWyMt",
                "isStatic": false,
                "rules": Array [
                  "display:none;background:",
                  [Function],
                  ";position:relative;z-index:999999999;border-radius:4px;margin-bottom:1.5em;width:",
                  [Function],
                  ";top:-2.5em;right:0;box-shadow:",
                  [Function],
                  ";",
                  "animation:",
                  Keyframes {
                    "id": "sc-keyframes-cryAyx",
                    "inject": [Function],
                    "name": "cryAyx",
                    "rules": Array [
                      "@-webkit-keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                      "@keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                    ],
                    "toString": [Function],
                  },
                  " 0.4s ease;animation-fill-mode:both;",
                  ";&.active{",
                  "animation:",
                  Keyframes {
                    "id": "sc-keyframes-QWJjr",
                    "inject": [Function],
                    "name": "QWJjr",
                    "rules": Array [
                      "@-webkit-keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                      "@keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                    ],
                    "toString": [Function],
                  },
                  " 0.4s ease;animation-fill-mode:both;",
                  ";display:block;}",
                ],
              },
              "displayName": "styles__Container",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styles__Container-kwWyMt",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <icon />,
                " ",
                "Send Feedback",
              ],
              "className": "",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              " ",
              "Send Feedback",
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styles__Trigger-jTszNK",
                "isStatic": false,
                "rules": Array [
                  "display:flex;align-items:center;position:absolute;right:0;bottom:0;align-items:center;font-weight:",
                  [Function],
                  ";background:",
                  [Function],
                  ";color:",
                  [Function],
                  ";border:1px solid ",
                  [Function],
                  ";white-space:nowrap;padding:",
                  [Function],
                  ";border-radius:",
                  [Function],
                  ";cursor:pointer;font-size:",
                  [Function],
                  ";box-shadow:",
                  [Function],
                  ";transition:box-shadow 0.3s,transform 0.2s ease-in,color 0.2s;&:hover{box-shadow:",
                  [Function],
                  ";background-color:",
                  [Function],
                  " transform:translateY(-1px);color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}img{margin-right:8px;}",
                ],
              },
              "displayName": "styles__Trigger",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styles__Trigger-jTszNK",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "styles__SlackFeedback-bbGQkf",
            "isStatic": false,
            "rules": Array [
              "position:fixed;font-family:",
              [Function],
              ";z-index:99999998;bottom:12px;right:0;margin:1em;*{box-sizing:border-box;}textarea{min-height:150px;}",
            ],
          },
          "displayName": "styles__SlackFeedback",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "styles__SlackFeedback-bbGQkf",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`SlackFeedback should match the snapshots 2`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SlackFeedback
    channel="#tests"
    defaultSelectedType={null}
    disabled={true}
    emoji=":party:"
    errorTimeout={8000}
    feedbackTypes={
      Array [
        Object {
          "label": "Bug",
          "value": "bug",
        },
        Object {
          "label": "Improvement",
          "value": "improvement",
        },
        Object {
          "label": "Feature",
          "value": "feature",
        },
      ]
    }
    icon={[Function]}
    onClose={[MockFunction]}
    onImageUpload={[MockFunction]}
    onOpen={[MockFunction]}
    onSubmit={[MockFunction]}
    sentTimeout={0}
    showChannel={true}
    showIcon={true}
    theme={
      Object {
        "button": Object {
          "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
        },
        "colors": Object {
          "background": "#f4f4f7",
          "border": "#d0d8e1",
          "error": "#ec3c3c",
          "primary": "#0088ff",
          "secondary": "#222c4f",
          "success": "#3dc86f",
          "text": "#333333",
        },
        "content": Object {
          "borderRadius": "4px",
          "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
          "fontSize": "14px",
          "padding": "0.6em",
        },
        "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
        "header": Object {
          "backgroundColor": "#222c4f",
          "color": "white",
        },
        "image": Object {
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "height": "140px",
        },
        "input": Object {
          "backgroundColor": "white",
          "borderRadius": "4px",
          "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
          "color": "#444444",
          "fontSize": "14px",
          "padding": "0.5em",
        },
        "label": Object {
          "color": "#0087ff",
          "fontSize": "11px",
        },
        "loader": Object {
          "color": "#ffffff",
          "size": "4em",
          "width": "3px",
        },
        "overlay": Object {
          "backgroundColor": "rgba(34, 44, 79, 0.4)",
        },
        "tab": Object {
          "backgroundColor": "rgba(255, 255, 255, 0.5)",
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "selectedBackgroundColor": "#0087ff",
          "selectedColor": "white",
        },
        "trigger": Object {
          "backgroundColor": "#ffffff",
          "border": "none",
          "borderRadius": "30px",
          "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
          "color": "#333333",
          "fontSize": "13px",
          "fontWeight": "normal",
          "hoverBackgroundColor": "inherit",
          "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
          "hoverColor": "inherit",
          "padding": "12px 1.25em",
        },
        "uploadButton": Object {
          "backgroundColor": "white",
          "border": "1px solid #d0d8e1",
          "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
        },
      }
    }
    translations={
      Object {
        "checkbox.option": "Send url with feedback",
        "close": "close",
        "error.archived": "Channel is Archived!",
        "error.badrequest": "Bad Request!",
        "error.forbidden": "Forbidden!",
        "error.internal": "Server Error!",
        "error.notfound": "Channel Not Found!",
        "error.unexpected": "Unexpected error!",
        "error.upload": "Error uploading image!",
        "feedback.type.bug": "Bug",
        "feedback.type.feature": "Feature",
        "feedback.type.improvement": "Improvement",
        "footer.text": "React Slack Feedback",
        "header.title": "Send Feedback",
        "image.remove": "Remove",
        "label.channel": "Channel",
        "label.message": "Message",
        "label.type": "Feedback Type",
        "placeholder": "Your message...",
        "submit.sending": "Sending feedback...",
        "submit.sent": "Sent!",
        "submit.text": "Send Feedback",
        "trigger.text": "Send Feedback",
        "upload.text": "Attach Image",
      }
    }
    user="unit-tester"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`SlackFeedback should match the snapshots 3`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SlackFeedback
    channel="#tests"
    defaultSelectedType={null}
    disabled={false}
    emoji=":party:"
    errorTimeout={8000}
    feedbackTypes={
      Array [
        Object {
          "label": "Bug",
          "value": "bug",
        },
        Object {
          "label": "Improvement",
          "value": "improvement",
        },
        Object {
          "label": "Feature",
          "value": "feature",
        },
      ]
    }
    icon={[Function]}
    onClose={[MockFunction]}
    onImageUpload={[MockFunction]}
    onOpen={[MockFunction]}
    onSubmit={[MockFunction]}
    sentTimeout={0}
    showChannel={false}
    showIcon={true}
    theme={
      Object {
        "button": Object {
          "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
        },
        "colors": Object {
          "background": "#f4f4f7",
          "border": "#d0d8e1",
          "error": "#ec3c3c",
          "primary": "#0088ff",
          "secondary": "#222c4f",
          "success": "#3dc86f",
          "text": "#333333",
        },
        "content": Object {
          "borderRadius": "4px",
          "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
          "fontSize": "14px",
          "padding": "0.6em",
        },
        "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
        "header": Object {
          "backgroundColor": "#222c4f",
          "color": "white",
        },
        "image": Object {
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "height": "140px",
        },
        "input": Object {
          "backgroundColor": "white",
          "borderRadius": "4px",
          "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
          "color": "#444444",
          "fontSize": "14px",
          "padding": "0.5em",
        },
        "label": Object {
          "color": "#0087ff",
          "fontSize": "11px",
        },
        "loader": Object {
          "color": "#ffffff",
          "size": "4em",
          "width": "3px",
        },
        "overlay": Object {
          "backgroundColor": "rgba(34, 44, 79, 0.4)",
        },
        "tab": Object {
          "backgroundColor": "rgba(255, 255, 255, 0.5)",
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "selectedBackgroundColor": "#0087ff",
          "selectedColor": "white",
        },
        "trigger": Object {
          "backgroundColor": "#ffffff",
          "border": "none",
          "borderRadius": "30px",
          "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
          "color": "#333333",
          "fontSize": "13px",
          "fontWeight": "normal",
          "hoverBackgroundColor": "inherit",
          "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
          "hoverColor": "inherit",
          "padding": "12px 1.25em",
        },
        "uploadButton": Object {
          "backgroundColor": "white",
          "border": "1px solid #d0d8e1",
          "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
        },
      }
    }
    translations={
      Object {
        "checkbox.option": "Send url with feedback",
        "close": "close",
        "error.archived": "Channel is Archived!",
        "error.badrequest": "Bad Request!",
        "error.forbidden": "Forbidden!",
        "error.internal": "Server Error!",
        "error.notfound": "Channel Not Found!",
        "error.unexpected": "Unexpected error!",
        "error.upload": "Error uploading image!",
        "feedback.type.bug": "Bug",
        "feedback.type.feature": "Feature",
        "feedback.type.improvement": "Improvement",
        "footer.text": "React Slack Feedback",
        "header.title": "Send Feedback",
        "image.remove": "Remove",
        "label.channel": "Channel",
        "label.message": "Message",
        "label.type": "Feedback Type",
        "placeholder": "Your message...",
        "submit.sending": "Sending feedback...",
        "submit.sent": "Sent!",
        "submit.text": "Send Feedback",
        "trigger.text": "Send Feedback",
        "upload.text": "Attach Image",
      }
    }
    user="unit-tester"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <UNDEFINED
        className=""
      >
        <UNDEFINED
          className="fadeInUp"
        >
          <UNDEFINED>
            <icon />
             
            Send Feedback
            <UNDEFINED
              className="close"
              onClick={[Function]}
            >
              close
            </UNDEFINED>
          </UNDEFINED>
          <UNDEFINED>
            <UNDEFINED>
              Feedback Type
            </UNDEFINED>
            <UNDEFINED>
              <li
                className="selected"
                onClick={[Function]}
                title="Bug"
              >
                Bug
              </li>
              <li
                className=""
                onClick={[Function]}
                title="Improvement"
              >
                Improvement
              </li>
              <li
                className=""
                onClick={[Function]}
                title="Feature"
              >
                Feature
              </li>
            </UNDEFINED>
            <UNDEFINED>
              Message
            </UNDEFINED>
            <UNDEFINED
              as="textarea"
              name="message"
              onChange={[Function]}
              placeholder="Your message..."
              value=""
            />
            <UNDEFINED>
              <UNDEFINED
                htmlFor="imageUpload"
              >
                Attach Image
              </UNDEFINED>
              <UNDEFINED
                accept="image/*"
                as="input"
                id="imageUpload"
                onChange={[Function]}
                type="file"
              />
            </UNDEFINED>
            <UNDEFINED>
              <UNDEFINED
                checked={true}
                id="sendURL"
                onChange={[Function]}
                type="checkbox"
              />
              <UNDEFINED
                htmlFor="sendURL"
              >
                Send url with feedback
              </UNDEFINED>
            </UNDEFINED>
            <UNDEFINED
              className=""
              disabled={true}
              onClick={[Function]}
            >
              Send Feedback
            </UNDEFINED>
          </UNDEFINED>
        </UNDEFINED>
        <UNDEFINED
          className=""
          onClick={[Function]}
        >
          <icon />
           
          Send Feedback
        </UNDEFINED>
      </UNDEFINED>,
      "theme": Object {
        "button": Object {
          "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
        },
        "colors": Object {
          "background": "#f4f4f7",
          "border": "#d0d8e1",
          "error": "#ec3c3c",
          "primary": "#0088ff",
          "secondary": "#222c4f",
          "success": "#3dc86f",
          "text": "#333333",
        },
        "content": Object {
          "borderRadius": "4px",
          "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
          "fontSize": "14px",
          "padding": "0.6em",
        },
        "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
        "header": Object {
          "backgroundColor": "#222c4f",
          "color": "white",
        },
        "image": Object {
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "height": "140px",
        },
        "input": Object {
          "backgroundColor": "white",
          "borderRadius": "4px",
          "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
          "color": "#444444",
          "fontSize": "14px",
          "padding": "0.5em",
        },
        "label": Object {
          "color": "#0087ff",
          "fontSize": "11px",
        },
        "loader": Object {
          "color": "#ffffff",
          "size": "4em",
          "width": "3px",
        },
        "overlay": Object {
          "backgroundColor": "rgba(34, 44, 79, 0.4)",
        },
        "tab": Object {
          "backgroundColor": "rgba(255, 255, 255, 0.5)",
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "selectedBackgroundColor": "#0087ff",
          "selectedColor": "white",
        },
        "trigger": Object {
          "backgroundColor": "#ffffff",
          "border": "none",
          "borderRadius": "30px",
          "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
          "color": "#333333",
          "fontSize": "13px",
          "fontWeight": "normal",
          "hoverBackgroundColor": "inherit",
          "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
          "hoverColor": "inherit",
          "padding": "12px 1.25em",
        },
        "uploadButton": Object {
          "backgroundColor": "white",
          "border": "1px solid #d0d8e1",
          "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
        },
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <UNDEFINED
            className="fadeInUp"
          >
            <UNDEFINED>
              <icon />
               
              Send Feedback
              <UNDEFINED
                className="close"
                onClick={[Function]}
              >
                close
              </UNDEFINED>
            </UNDEFINED>
            <UNDEFINED>
              <UNDEFINED>
                Feedback Type
              </UNDEFINED>
              <UNDEFINED>
                <li
                  className="selected"
                  onClick={[Function]}
                  title="Bug"
                >
                  Bug
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Improvement"
                >
                  Improvement
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Feature"
                >
                  Feature
                </li>
              </UNDEFINED>
              <UNDEFINED>
                Message
              </UNDEFINED>
              <UNDEFINED
                as="textarea"
                name="message"
                onChange={[Function]}
                placeholder="Your message..."
                value=""
              />
              <UNDEFINED>
                <UNDEFINED
                  htmlFor="imageUpload"
                >
                  Attach Image
                </UNDEFINED>
                <UNDEFINED
                  accept="image/*"
                  as="input"
                  id="imageUpload"
                  onChange={[Function]}
                  type="file"
                />
              </UNDEFINED>
              <UNDEFINED>
                <UNDEFINED
                  checked={true}
                  id="sendURL"
                  onChange={[Function]}
                  type="checkbox"
                />
                <UNDEFINED
                  htmlFor="sendURL"
                >
                  Send url with feedback
                </UNDEFINED>
              </UNDEFINED>
              <UNDEFINED
                className=""
                disabled={true}
                onClick={[Function]}
              >
                Send Feedback
              </UNDEFINED>
            </UNDEFINED>
          </UNDEFINED>,
          <UNDEFINED
            className=""
            onClick={[Function]}
          >
            <icon />
             
            Send Feedback
          </UNDEFINED>,
        ],
        "className": "",
      },
      "ref": Object {
        "current": null,
      },
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <UNDEFINED>
                <icon />
                 
                Send Feedback
                <UNDEFINED
                  className="close"
                  onClick={[Function]}
                >
                  close
                </UNDEFINED>
              </UNDEFINED>,
              <UNDEFINED>
                <UNDEFINED>
                  Feedback Type
                </UNDEFINED>
                <UNDEFINED>
                  <li
                    className="selected"
                    onClick={[Function]}
                    title="Bug"
                  >
                    Bug
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Improvement"
                  >
                    Improvement
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Feature"
                  >
                    Feature
                  </li>
                </UNDEFINED>
                <UNDEFINED>
                  Message
                </UNDEFINED>
                <UNDEFINED
                  as="textarea"
                  name="message"
                  onChange={[Function]}
                  placeholder="Your message..."
                  value=""
                />
                <UNDEFINED>
                  <UNDEFINED
                    htmlFor="imageUpload"
                  >
                    Attach Image
                  </UNDEFINED>
                  <UNDEFINED
                    accept="image/*"
                    as="input"
                    id="imageUpload"
                    onChange={[Function]}
                    type="file"
                  />
                </UNDEFINED>
                <UNDEFINED>
                  <UNDEFINED
                    checked={true}
                    id="sendURL"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <UNDEFINED
                    htmlFor="sendURL"
                  >
                    Send url with feedback
                  </UNDEFINED>
                </UNDEFINED>
                <UNDEFINED
                  className=""
                  disabled={true}
                  onClick={[Function]}
                >
                  Send Feedback
                </UNDEFINED>
              </UNDEFINED>,
            ],
            "className": "fadeInUp",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <icon />,
                  " ",
                  "Send Feedback",
                  <UNDEFINED
                    className="close"
                    onClick={[Function]}
                  >
                    close
                  </UNDEFINED>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                " ",
                "Send Feedback",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "close",
                    "className": "close",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "close",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__CloseButton-kxzKQm",
                      "isStatic": true,
                      "rules": Array [
                        "cursor:pointer;opacity:0.7;margin-left:auto;font-size:11px;&:hover{opacity:1;}",
                      ],
                    },
                    "displayName": "styles__CloseButton",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__CloseButton-kxzKQm",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "styles__Header-gpCiqM",
                  "isStatic": false,
                  "rules": Array [
                    "display:flex;color:",
                    [Function],
                    ";background:",
                    [Function],
                    ";padding:0.75em 1em;border-radius:3px 3px 0 0;font-size:14px;font-weight:300;align-items:center;> img{margin-right:0.5em;}",
                  ],
                },
                "displayName": "styles__Header",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "styles__Header-gpCiqM",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  false,
                  <UNDEFINED>
                    Feedback Type
                  </UNDEFINED>,
                  <UNDEFINED>
                    <li
                      className="selected"
                      onClick={[Function]}
                      title="Bug"
                    >
                      Bug
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Improvement"
                    >
                      Improvement
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Feature"
                    >
                      Feature
                    </li>
                  </UNDEFINED>,
                  <UNDEFINED>
                    Message
                  </UNDEFINED>,
                  <UNDEFINED
                    as="textarea"
                    name="message"
                    onChange={[Function]}
                    placeholder="Your message..."
                    value=""
                  />,
                  <UNDEFINED>
                    <UNDEFINED
                      htmlFor="imageUpload"
                    >
                      Attach Image
                    </UNDEFINED>
                    <UNDEFINED
                      accept="image/*"
                      as="input"
                      id="imageUpload"
                      onChange={[Function]}
                      type="file"
                    />
                  </UNDEFINED>,
                  <UNDEFINED>
                    <UNDEFINED
                      checked={true}
                      id="sendURL"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    <UNDEFINED
                      htmlFor="sendURL"
                    >
                      Send url with feedback
                    </UNDEFINED>
                  </UNDEFINED>,
                  <UNDEFINED
                    className=""
                    disabled={true}
                    onClick={[Function]}
                  >
                    Send Feedback
                  </UNDEFINED>,
                ],
              },
              "ref": null,
              "rendered": Array [
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Feedback Type",
                  },
                  "ref": null,
                  "rendered": "Feedback Type",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__Label-eHLCPc",
                      "isStatic": false,
                      "rules": Array [
                        "color:",
                        [Function],
                        ";display:block;font-size:",
                        [Function],
                        ";margin:5px 0;",
                      ],
                    },
                    "displayName": "styles__Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__Label-eHLCPc",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <li
                        className="selected"
                        onClick={[Function]}
                        title="Bug"
                      >
                        Bug
                      </li>,
                      <li
                        className=""
                        onClick={[Function]}
                        title="Improvement"
                      >
                        Improvement
                      </li>,
                      <li
                        className=""
                        onClick={[Function]}
                        title="Feature"
                      >
                        Feature
                      </li>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": "bug",
                      "nodeType": "host",
                      "props": Object {
                        "children": "Bug",
                        "className": "selected",
                        "onClick": [Function],
                        "title": "Bug",
                      },
                      "ref": null,
                      "rendered": "Bug",
                      "type": "li",
                    },
                    Object {
                      "instance": null,
                      "key": "improvement",
                      "nodeType": "host",
                      "props": Object {
                        "children": "Improvement",
                        "className": "",
                        "onClick": [Function],
                        "title": "Improvement",
                      },
                      "ref": null,
                      "rendered": "Improvement",
                      "type": "li",
                    },
                    Object {
                      "instance": null,
                      "key": "feature",
                      "nodeType": "host",
                      "props": Object {
                        "children": "Feature",
                        "className": "",
                        "onClick": [Function],
                        "title": "Feature",
                      },
                      "ref": null,
                      "rendered": "Feature",
                      "type": "li",
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__Tabs-dAptag",
                      "isStatic": false,
                      "rules": Array [
                        "display:flex;list-style:none;padding:0;margin:0;margin-bottom:1em;> li{flex:1 0 calc(100% / 3);user-select:none;background:",
                        [Function],
                        ";color:",
                        [Function],
                        ";text-align:center;padding:0.75em;font-size:13px;cursor:pointer;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border:",
                        [Function],
                        ";&.selected{border-color:",
                        [Function],
                        ";background:",
                        [Function],
                        ";color:white;position:relative;}&:hover:not(.selected){border:",
                        [Function],
                        ";}&:first-of-type{border-radius:4px 0 0 4px;margin-right:-1px;}&:last-of-type{border-radius:0 4px 4px 0;margin-left:-1px;}}",
                      ],
                    },
                    "displayName": "styles__Tabs",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__Tabs-dAptag",
                    "target": "ul",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Message",
                  },
                  "ref": null,
                  "rendered": "Message",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__Label-eHLCPc",
                      "isStatic": false,
                      "rules": Array [
                        "color:",
                        [Function],
                        ";display:block;font-size:",
                        [Function],
                        ";margin:5px 0;",
                      ],
                    },
                    "displayName": "styles__Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__Label-eHLCPc",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "as": "textarea",
                    "name": "message",
                    "onChange": [Function],
                    "placeholder": "Your message...",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__FormElement-bDQwuf",
                      "isStatic": false,
                      "rules": Array [
                        "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                        ";box-sizing:border-box;",
                        ";width:100%;color:",
                        [Function],
                        ";border:",
                        [Function],
                        ";border-radius:",
                        [Function],
                        ";padding:",
                        [Function],
                        ";font-size:",
                        [Function],
                        ";background:",
                        [Function],
                        ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                        [Function],
                        ";box-shadow:",
                        [Function],
                        ";}&[disabled],&.disabled{background:",
                        [Function],
                        ";pointer-events:none;color:",
                        [Function],
                        ";}",
                      ],
                    },
                    "displayName": "styles__FormElement",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__FormElement-bDQwuf",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <UNDEFINED
                        htmlFor="imageUpload"
                      >
                        Attach Image
                      </UNDEFINED>,
                      <UNDEFINED
                        accept="image/*"
                        as="input"
                        id="imageUpload"
                        onChange={[Function]}
                        type="file"
                      />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Attach Image",
                        "htmlFor": "imageUpload",
                      },
                      "ref": null,
                      "rendered": "Attach Image",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__UploadButton-dKkAQc",
                          "isStatic": false,
                          "rules": Array [
                            "color:",
                            [Function],
                            ";background:",
                            [Function],
                            ";border:",
                            [Function],
                            ";padding:0.75em 3em;text-align:center;font-size:",
                            [Function],
                            ";margin:auto;width:100%;display:table;cursor:pointer;border-radius:4px;&:hover{background:",
                            [Function],
                            ";color:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "styles__UploadButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__UploadButton-dKkAQc",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "accept": "image/*",
                        "as": "input",
                        "id": "imageUpload",
                        "onChange": [Function],
                        "type": "file",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__FormElement-bDQwuf",
                          "isStatic": false,
                          "rules": Array [
                            "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                            ";box-sizing:border-box;",
                            ";width:100%;color:",
                            [Function],
                            ";border:",
                            [Function],
                            ";border-radius:",
                            [Function],
                            ";padding:",
                            [Function],
                            ";font-size:",
                            [Function],
                            ";background:",
                            [Function],
                            ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                            [Function],
                            ";box-shadow:",
                            [Function],
                            ";}&[disabled],&.disabled{background:",
                            [Function],
                            ";pointer-events:none;color:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "styles__FormElement",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__FormElement-bDQwuf",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__ImageUpload-jMrDzo",
                      "isStatic": true,
                      "rules": Array [
                        "> input{display:none;}",
                      ],
                    },
                    "displayName": "styles__ImageUpload",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__ImageUpload-jMrDzo",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <UNDEFINED
                        checked={true}
                        id="sendURL"
                        onChange={[Function]}
                        type="checkbox"
                      />,
                      <UNDEFINED
                        htmlFor="sendURL"
                      >
                        Send url with feedback
                      </UNDEFINED>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "checked": true,
                        "id": "sendURL",
                        "onChange": [Function],
                        "type": "checkbox",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__Checkbox-gDImgc",
                          "isStatic": true,
                          "rules": Array [
                            "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                            ";box-sizing:border-box;",
                            ";appearance:checkbox;position:static;font-size:1.1em;&::before,&::after{content:none;}",
                          ],
                        },
                        "displayName": "styles__Checkbox",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__Checkbox-gDImgc",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Send url with feedback",
                        "htmlFor": "sendURL",
                      },
                      "ref": null,
                      "rendered": "Send url with feedback",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__CheckboxLabel-iljvce",
                          "isStatic": true,
                          "rules": Array [
                            "display:inline-block;margin-left:10px;color:inherit;font-size:13px;color:#858ba0;cursor:pointer;&:hover{color:#858ba0;}",
                          ],
                        },
                        "displayName": "styles__CheckboxLabel",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__CheckboxLabel-iljvce",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__CheckboxContainer-ESvur",
                      "isStatic": true,
                      "rules": Array [
                        "padding:0.5em 0 1em;",
                      ],
                    },
                    "displayName": "styles__CheckboxContainer",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__CheckboxContainer-ESvur",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Send Feedback",
                    "className": "",
                    "disabled": true,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Send Feedback",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__SubmitButton-hvIGQG",
                      "isStatic": false,
                      "rules": Array [
                        "display:block;width:100%;padding:1em 0.75em;text-align:center;background:",
                        [Function],
                        ";color:white;font-weight:400;outline:none;border:none;font-size:11px;text-transform:uppercase;letter-spacing:0.5px;border-radius:4px;cursor:pointer;transition:background 0.2s,box-shadow 0.2s;&[disabled],&.disabled{pointer-events:none;opacity:0.8;}&.sent{background:",
                        [Function],
                        ";pointer-events:none;opacity:1;}&.error{background:",
                        [Function],
                        ";pointer-events:none;opacity:1;}&:hover{background:",
                        [Function],
                        ";box-shadow:none;}",
                      ],
                    },
                    "displayName": "styles__SubmitButton",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__SubmitButton-hvIGQG",
                    "target": "button",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "styles__Content-ikKqwP",
                  "isStatic": false,
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "styles__Content",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "styles__Content-ikKqwP",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styles__Container-kwWyMt",
              "isStatic": false,
              "rules": Array [
                "display:none;background:",
                [Function],
                ";position:relative;z-index:999999999;border-radius:4px;margin-bottom:1.5em;width:",
                [Function],
                ";top:-2.5em;right:0;box-shadow:",
                [Function],
                ";",
                "animation:",
                Keyframes {
                  "id": "sc-keyframes-cryAyx",
                  "inject": [Function],
                  "name": "cryAyx",
                  "rules": Array [
                    "@-webkit-keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                    "@keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                  ],
                  "toString": [Function],
                },
                " 0.4s ease;animation-fill-mode:both;",
                ";&.active{",
                "animation:",
                Keyframes {
                  "id": "sc-keyframes-QWJjr",
                  "inject": [Function],
                  "name": "QWJjr",
                  "rules": Array [
                    "@-webkit-keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                    "@keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                  ],
                  "toString": [Function],
                },
                " 0.4s ease;animation-fill-mode:both;",
                ";display:block;}",
              ],
            },
            "displayName": "styles__Container",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styles__Container-kwWyMt",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <icon />,
              " ",
              "Send Feedback",
            ],
            "className": "",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            " ",
            "Send Feedback",
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styles__Trigger-jTszNK",
              "isStatic": false,
              "rules": Array [
                "display:flex;align-items:center;position:absolute;right:0;bottom:0;align-items:center;font-weight:",
                [Function],
                ";background:",
                [Function],
                ";color:",
                [Function],
                ";border:1px solid ",
                [Function],
                ";white-space:nowrap;padding:",
                [Function],
                ";border-radius:",
                [Function],
                ";cursor:pointer;font-size:",
                [Function],
                ";box-shadow:",
                [Function],
                ";transition:box-shadow 0.3s,transform 0.2s ease-in,color 0.2s;&:hover{box-shadow:",
                [Function],
                ";background-color:",
                [Function],
                " transform:translateY(-1px);color:",
                [Function],
                ";border-color:",
                [Function],
                ";}img{margin-right:8px;}",
              ],
            },
            "displayName": "styles__Trigger",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styles__Trigger-jTszNK",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "styles__SlackFeedback-bbGQkf",
          "isStatic": false,
          "rules": Array [
            "position:fixed;font-family:",
            [Function],
            ";z-index:99999998;bottom:12px;right:0;margin:1em;*{box-sizing:border-box;}textarea{min-height:150px;}",
          ],
        },
        "displayName": "styles__SlackFeedback",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "styles__SlackFeedback-bbGQkf",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <UNDEFINED
          className=""
        >
          <UNDEFINED
            className="fadeInUp"
          >
            <UNDEFINED>
              <icon />
               
              Send Feedback
              <UNDEFINED
                className="close"
                onClick={[Function]}
              >
                close
              </UNDEFINED>
            </UNDEFINED>
            <UNDEFINED>
              <UNDEFINED>
                Feedback Type
              </UNDEFINED>
              <UNDEFINED>
                <li
                  className="selected"
                  onClick={[Function]}
                  title="Bug"
                >
                  Bug
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Improvement"
                >
                  Improvement
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Feature"
                >
                  Feature
                </li>
              </UNDEFINED>
              <UNDEFINED>
                Message
              </UNDEFINED>
              <UNDEFINED
                as="textarea"
                name="message"
                onChange={[Function]}
                placeholder="Your message..."
                value=""
              />
              <UNDEFINED>
                <UNDEFINED
                  htmlFor="imageUpload"
                >
                  Attach Image
                </UNDEFINED>
                <UNDEFINED
                  accept="image/*"
                  as="input"
                  id="imageUpload"
                  onChange={[Function]}
                  type="file"
                />
              </UNDEFINED>
              <UNDEFINED>
                <UNDEFINED
                  checked={true}
                  id="sendURL"
                  onChange={[Function]}
                  type="checkbox"
                />
                <UNDEFINED
                  htmlFor="sendURL"
                >
                  Send url with feedback
                </UNDEFINED>
              </UNDEFINED>
              <UNDEFINED
                className=""
                disabled={true}
                onClick={[Function]}
              >
                Send Feedback
              </UNDEFINED>
            </UNDEFINED>
          </UNDEFINED>
          <UNDEFINED
            className=""
            onClick={[Function]}
          >
            <icon />
             
            Send Feedback
          </UNDEFINED>
        </UNDEFINED>,
        "theme": Object {
          "button": Object {
            "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
          },
          "colors": Object {
            "background": "#f4f4f7",
            "border": "#d0d8e1",
            "error": "#ec3c3c",
            "primary": "#0088ff",
            "secondary": "#222c4f",
            "success": "#3dc86f",
            "text": "#333333",
          },
          "content": Object {
            "borderRadius": "4px",
            "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
            "fontSize": "14px",
            "padding": "0.6em",
          },
          "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
          "header": Object {
            "backgroundColor": "#222c4f",
            "color": "white",
          },
          "image": Object {
            "border": "1px solid #d0d8e1",
            "borderRadius": "4px",
            "height": "140px",
          },
          "input": Object {
            "backgroundColor": "white",
            "borderRadius": "4px",
            "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
            "color": "#444444",
            "fontSize": "14px",
            "padding": "0.5em",
          },
          "label": Object {
            "color": "#0087ff",
            "fontSize": "11px",
          },
          "loader": Object {
            "color": "#ffffff",
            "size": "4em",
            "width": "3px",
          },
          "overlay": Object {
            "backgroundColor": "rgba(34, 44, 79, 0.4)",
          },
          "tab": Object {
            "backgroundColor": "rgba(255, 255, 255, 0.5)",
            "border": "1px solid #d0d8e1",
            "borderRadius": "4px",
            "selectedBackgroundColor": "#0087ff",
            "selectedColor": "white",
          },
          "trigger": Object {
            "backgroundColor": "#ffffff",
            "border": "none",
            "borderRadius": "30px",
            "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
            "color": "#333333",
            "fontSize": "13px",
            "fontWeight": "normal",
            "hoverBackgroundColor": "inherit",
            "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
            "hoverColor": "inherit",
            "padding": "12px 1.25em",
          },
          "uploadButton": Object {
            "backgroundColor": "white",
            "border": "1px solid #d0d8e1",
            "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
          },
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <UNDEFINED
              className="fadeInUp"
            >
              <UNDEFINED>
                <icon />
                 
                Send Feedback
                <UNDEFINED
                  className="close"
                  onClick={[Function]}
                >
                  close
                </UNDEFINED>
              </UNDEFINED>
              <UNDEFINED>
                <UNDEFINED>
                  Feedback Type
                </UNDEFINED>
                <UNDEFINED>
                  <li
                    className="selected"
                    onClick={[Function]}
                    title="Bug"
                  >
                    Bug
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Improvement"
                  >
                    Improvement
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Feature"
                  >
                    Feature
                  </li>
                </UNDEFINED>
                <UNDEFINED>
                  Message
                </UNDEFINED>
                <UNDEFINED
                  as="textarea"
                  name="message"
                  onChange={[Function]}
                  placeholder="Your message..."
                  value=""
                />
                <UNDEFINED>
                  <UNDEFINED
                    htmlFor="imageUpload"
                  >
                    Attach Image
                  </UNDEFINED>
                  <UNDEFINED
                    accept="image/*"
                    as="input"
                    id="imageUpload"
                    onChange={[Function]}
                    type="file"
                  />
                </UNDEFINED>
                <UNDEFINED>
                  <UNDEFINED
                    checked={true}
                    id="sendURL"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <UNDEFINED
                    htmlFor="sendURL"
                  >
                    Send url with feedback
                  </UNDEFINED>
                </UNDEFINED>
                <UNDEFINED
                  className=""
                  disabled={true}
                  onClick={[Function]}
                >
                  Send Feedback
                </UNDEFINED>
              </UNDEFINED>
            </UNDEFINED>,
            <UNDEFINED
              className=""
              onClick={[Function]}
            >
              <icon />
               
              Send Feedback
            </UNDEFINED>,
          ],
          "className": "",
        },
        "ref": Object {
          "current": null,
        },
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <UNDEFINED>
                  <icon />
                   
                  Send Feedback
                  <UNDEFINED
                    className="close"
                    onClick={[Function]}
                  >
                    close
                  </UNDEFINED>
                </UNDEFINED>,
                <UNDEFINED>
                  <UNDEFINED>
                    Feedback Type
                  </UNDEFINED>
                  <UNDEFINED>
                    <li
                      className="selected"
                      onClick={[Function]}
                      title="Bug"
                    >
                      Bug
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Improvement"
                    >
                      Improvement
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Feature"
                    >
                      Feature
                    </li>
                  </UNDEFINED>
                  <UNDEFINED>
                    Message
                  </UNDEFINED>
                  <UNDEFINED
                    as="textarea"
                    name="message"
                    onChange={[Function]}
                    placeholder="Your message..."
                    value=""
                  />
                  <UNDEFINED>
                    <UNDEFINED
                      htmlFor="imageUpload"
                    >
                      Attach Image
                    </UNDEFINED>
                    <UNDEFINED
                      accept="image/*"
                      as="input"
                      id="imageUpload"
                      onChange={[Function]}
                      type="file"
                    />
                  </UNDEFINED>
                  <UNDEFINED>
                    <UNDEFINED
                      checked={true}
                      id="sendURL"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    <UNDEFINED
                      htmlFor="sendURL"
                    >
                      Send url with feedback
                    </UNDEFINED>
                  </UNDEFINED>
                  <UNDEFINED
                    className=""
                    disabled={true}
                    onClick={[Function]}
                  >
                    Send Feedback
                  </UNDEFINED>
                </UNDEFINED>,
              ],
              "className": "fadeInUp",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <icon />,
                    " ",
                    "Send Feedback",
                    <UNDEFINED
                      className="close"
                      onClick={[Function]}
                    >
                      close
                    </UNDEFINED>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  " ",
                  "Send Feedback",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "close",
                      "className": "close",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "close",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__CloseButton-kxzKQm",
                        "isStatic": true,
                        "rules": Array [
                          "cursor:pointer;opacity:0.7;margin-left:auto;font-size:11px;&:hover{opacity:1;}",
                        ],
                      },
                      "displayName": "styles__CloseButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__CloseButton-kxzKQm",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "styles__Header-gpCiqM",
                    "isStatic": false,
                    "rules": Array [
                      "display:flex;color:",
                      [Function],
                      ";background:",
                      [Function],
                      ";padding:0.75em 1em;border-radius:3px 3px 0 0;font-size:14px;font-weight:300;align-items:center;> img{margin-right:0.5em;}",
                    ],
                  },
                  "displayName": "styles__Header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "styles__Header-gpCiqM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    false,
                    <UNDEFINED>
                      Feedback Type
                    </UNDEFINED>,
                    <UNDEFINED>
                      <li
                        className="selected"
                        onClick={[Function]}
                        title="Bug"
                      >
                        Bug
                      </li>
                      <li
                        className=""
                        onClick={[Function]}
                        title="Improvement"
                      >
                        Improvement
                      </li>
                      <li
                        className=""
                        onClick={[Function]}
                        title="Feature"
                      >
                        Feature
                      </li>
                    </UNDEFINED>,
                    <UNDEFINED>
                      Message
                    </UNDEFINED>,
                    <UNDEFINED
                      as="textarea"
                      name="message"
                      onChange={[Function]}
                      placeholder="Your message..."
                      value=""
                    />,
                    <UNDEFINED>
                      <UNDEFINED
                        htmlFor="imageUpload"
                      >
                        Attach Image
                      </UNDEFINED>
                      <UNDEFINED
                        accept="image/*"
                        as="input"
                        id="imageUpload"
                        onChange={[Function]}
                        type="file"
                      />
                    </UNDEFINED>,
                    <UNDEFINED>
                      <UNDEFINED
                        checked={true}
                        id="sendURL"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <UNDEFINED
                        htmlFor="sendURL"
                      >
                        Send url with feedback
                      </UNDEFINED>
                    </UNDEFINED>,
                    <UNDEFINED
                      className=""
                      disabled={true}
                      onClick={[Function]}
                    >
                      Send Feedback
                    </UNDEFINED>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  false,
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Feedback Type",
                    },
                    "ref": null,
                    "rendered": "Feedback Type",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Label-eHLCPc",
                        "isStatic": false,
                        "rules": Array [
                          "color:",
                          [Function],
                          ";display:block;font-size:",
                          [Function],
                          ";margin:5px 0;",
                        ],
                      },
                      "displayName": "styles__Label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Label-eHLCPc",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <li
                          className="selected"
                          onClick={[Function]}
                          title="Bug"
                        >
                          Bug
                        </li>,
                        <li
                          className=""
                          onClick={[Function]}
                          title="Improvement"
                        >
                          Improvement
                        </li>,
                        <li
                          className=""
                          onClick={[Function]}
                          title="Feature"
                        >
                          Feature
                        </li>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": "bug",
                        "nodeType": "host",
                        "props": Object {
                          "children": "Bug",
                          "className": "selected",
                          "onClick": [Function],
                          "title": "Bug",
                        },
                        "ref": null,
                        "rendered": "Bug",
                        "type": "li",
                      },
                      Object {
                        "instance": null,
                        "key": "improvement",
                        "nodeType": "host",
                        "props": Object {
                          "children": "Improvement",
                          "className": "",
                          "onClick": [Function],
                          "title": "Improvement",
                        },
                        "ref": null,
                        "rendered": "Improvement",
                        "type": "li",
                      },
                      Object {
                        "instance": null,
                        "key": "feature",
                        "nodeType": "host",
                        "props": Object {
                          "children": "Feature",
                          "className": "",
                          "onClick": [Function],
                          "title": "Feature",
                        },
                        "ref": null,
                        "rendered": "Feature",
                        "type": "li",
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Tabs-dAptag",
                        "isStatic": false,
                        "rules": Array [
                          "display:flex;list-style:none;padding:0;margin:0;margin-bottom:1em;> li{flex:1 0 calc(100% / 3);user-select:none;background:",
                          [Function],
                          ";color:",
                          [Function],
                          ";text-align:center;padding:0.75em;font-size:13px;cursor:pointer;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border:",
                          [Function],
                          ";&.selected{border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";color:white;position:relative;}&:hover:not(.selected){border:",
                          [Function],
                          ";}&:first-of-type{border-radius:4px 0 0 4px;margin-right:-1px;}&:last-of-type{border-radius:0 4px 4px 0;margin-left:-1px;}}",
                        ],
                      },
                      "displayName": "styles__Tabs",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Tabs-dAptag",
                      "target": "ul",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Message",
                    },
                    "ref": null,
                    "rendered": "Message",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Label-eHLCPc",
                        "isStatic": false,
                        "rules": Array [
                          "color:",
                          [Function],
                          ";display:block;font-size:",
                          [Function],
                          ";margin:5px 0;",
                        ],
                      },
                      "displayName": "styles__Label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Label-eHLCPc",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "as": "textarea",
                      "name": "message",
                      "onChange": [Function],
                      "placeholder": "Your message...",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__FormElement-bDQwuf",
                        "isStatic": false,
                        "rules": Array [
                          "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                          ";box-sizing:border-box;",
                          ";width:100%;color:",
                          [Function],
                          ";border:",
                          [Function],
                          ";border-radius:",
                          [Function],
                          ";padding:",
                          [Function],
                          ";font-size:",
                          [Function],
                          ";background:",
                          [Function],
                          ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                          [Function],
                          ";box-shadow:",
                          [Function],
                          ";}&[disabled],&.disabled{background:",
                          [Function],
                          ";pointer-events:none;color:",
                          [Function],
                          ";}",
                        ],
                      },
                      "displayName": "styles__FormElement",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__FormElement-bDQwuf",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <UNDEFINED
                          htmlFor="imageUpload"
                        >
                          Attach Image
                        </UNDEFINED>,
                        <UNDEFINED
                          accept="image/*"
                          as="input"
                          id="imageUpload"
                          onChange={[Function]}
                          type="file"
                        />,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Attach Image",
                          "htmlFor": "imageUpload",
                        },
                        "ref": null,
                        "rendered": "Attach Image",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__UploadButton-dKkAQc",
                            "isStatic": false,
                            "rules": Array [
                              "color:",
                              [Function],
                              ";background:",
                              [Function],
                              ";border:",
                              [Function],
                              ";padding:0.75em 3em;text-align:center;font-size:",
                              [Function],
                              ";margin:auto;width:100%;display:table;cursor:pointer;border-radius:4px;&:hover{background:",
                              [Function],
                              ";color:",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "styles__UploadButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__UploadButton-dKkAQc",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "accept": "image/*",
                          "as": "input",
                          "id": "imageUpload",
                          "onChange": [Function],
                          "type": "file",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__FormElement-bDQwuf",
                            "isStatic": false,
                            "rules": Array [
                              "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                              ";box-sizing:border-box;",
                              ";width:100%;color:",
                              [Function],
                              ";border:",
                              [Function],
                              ";border-radius:",
                              [Function],
                              ";padding:",
                              [Function],
                              ";font-size:",
                              [Function],
                              ";background:",
                              [Function],
                              ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                              [Function],
                              ";box-shadow:",
                              [Function],
                              ";}&[disabled],&.disabled{background:",
                              [Function],
                              ";pointer-events:none;color:",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "styles__FormElement",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__FormElement-bDQwuf",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__ImageUpload-jMrDzo",
                        "isStatic": true,
                        "rules": Array [
                          "> input{display:none;}",
                        ],
                      },
                      "displayName": "styles__ImageUpload",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__ImageUpload-jMrDzo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <UNDEFINED
                          checked={true}
                          id="sendURL"
                          onChange={[Function]}
                          type="checkbox"
                        />,
                        <UNDEFINED
                          htmlFor="sendURL"
                        >
                          Send url with feedback
                        </UNDEFINED>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "checked": true,
                          "id": "sendURL",
                          "onChange": [Function],
                          "type": "checkbox",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__Checkbox-gDImgc",
                            "isStatic": true,
                            "rules": Array [
                              "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                              ";box-sizing:border-box;",
                              ";appearance:checkbox;position:static;font-size:1.1em;&::before,&::after{content:none;}",
                            ],
                          },
                          "displayName": "styles__Checkbox",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__Checkbox-gDImgc",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Send url with feedback",
                          "htmlFor": "sendURL",
                        },
                        "ref": null,
                        "rendered": "Send url with feedback",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__CheckboxLabel-iljvce",
                            "isStatic": true,
                            "rules": Array [
                              "display:inline-block;margin-left:10px;color:inherit;font-size:13px;color:#858ba0;cursor:pointer;&:hover{color:#858ba0;}",
                            ],
                          },
                          "displayName": "styles__CheckboxLabel",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__CheckboxLabel-iljvce",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__CheckboxContainer-ESvur",
                        "isStatic": true,
                        "rules": Array [
                          "padding:0.5em 0 1em;",
                        ],
                      },
                      "displayName": "styles__CheckboxContainer",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__CheckboxContainer-ESvur",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Send Feedback",
                      "className": "",
                      "disabled": true,
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Send Feedback",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__SubmitButton-hvIGQG",
                        "isStatic": false,
                        "rules": Array [
                          "display:block;width:100%;padding:1em 0.75em;text-align:center;background:",
                          [Function],
                          ";color:white;font-weight:400;outline:none;border:none;font-size:11px;text-transform:uppercase;letter-spacing:0.5px;border-radius:4px;cursor:pointer;transition:background 0.2s,box-shadow 0.2s;&[disabled],&.disabled{pointer-events:none;opacity:0.8;}&.sent{background:",
                          [Function],
                          ";pointer-events:none;opacity:1;}&.error{background:",
                          [Function],
                          ";pointer-events:none;opacity:1;}&:hover{background:",
                          [Function],
                          ";box-shadow:none;}",
                        ],
                      },
                      "displayName": "styles__SubmitButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__SubmitButton-hvIGQG",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "styles__Content-ikKqwP",
                    "isStatic": false,
                    "rules": Array [
                      "padding:",
                      [Function],
                      ";",
                    ],
                  },
                  "displayName": "styles__Content",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "styles__Content-ikKqwP",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styles__Container-kwWyMt",
                "isStatic": false,
                "rules": Array [
                  "display:none;background:",
                  [Function],
                  ";position:relative;z-index:999999999;border-radius:4px;margin-bottom:1.5em;width:",
                  [Function],
                  ";top:-2.5em;right:0;box-shadow:",
                  [Function],
                  ";",
                  "animation:",
                  Keyframes {
                    "id": "sc-keyframes-cryAyx",
                    "inject": [Function],
                    "name": "cryAyx",
                    "rules": Array [
                      "@-webkit-keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                      "@keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                    ],
                    "toString": [Function],
                  },
                  " 0.4s ease;animation-fill-mode:both;",
                  ";&.active{",
                  "animation:",
                  Keyframes {
                    "id": "sc-keyframes-QWJjr",
                    "inject": [Function],
                    "name": "QWJjr",
                    "rules": Array [
                      "@-webkit-keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                      "@keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                    ],
                    "toString": [Function],
                  },
                  " 0.4s ease;animation-fill-mode:both;",
                  ";display:block;}",
                ],
              },
              "displayName": "styles__Container",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styles__Container-kwWyMt",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <icon />,
                " ",
                "Send Feedback",
              ],
              "className": "",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              " ",
              "Send Feedback",
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styles__Trigger-jTszNK",
                "isStatic": false,
                "rules": Array [
                  "display:flex;align-items:center;position:absolute;right:0;bottom:0;align-items:center;font-weight:",
                  [Function],
                  ";background:",
                  [Function],
                  ";color:",
                  [Function],
                  ";border:1px solid ",
                  [Function],
                  ";white-space:nowrap;padding:",
                  [Function],
                  ";border-radius:",
                  [Function],
                  ";cursor:pointer;font-size:",
                  [Function],
                  ";box-shadow:",
                  [Function],
                  ";transition:box-shadow 0.3s,transform 0.2s ease-in,color 0.2s;&:hover{box-shadow:",
                  [Function],
                  ";background-color:",
                  [Function],
                  " transform:translateY(-1px);color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}img{margin-right:8px;}",
                ],
              },
              "displayName": "styles__Trigger",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styles__Trigger-jTszNK",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "styles__SlackFeedback-bbGQkf",
            "isStatic": false,
            "rules": Array [
              "position:fixed;font-family:",
              [Function],
              ";z-index:99999998;bottom:12px;right:0;margin:1em;*{box-sizing:border-box;}textarea{min-height:150px;}",
            ],
          },
          "displayName": "styles__SlackFeedback",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "styles__SlackFeedback-bbGQkf",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`SlackFeedback should match the snapshots 4`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SlackFeedback
    channel="#tests"
    defaultSelectedType={null}
    disabled={false}
    emoji=":party:"
    errorTimeout={8000}
    feedbackTypes={
      Array [
        Object {
          "label": "Bug",
          "value": "bug",
        },
        Object {
          "label": "Improvement",
          "value": "improvement",
        },
        Object {
          "label": "Feature",
          "value": "feature",
        },
      ]
    }
    icon={[Function]}
    onClose={[MockFunction]}
    onImageUpload={[MockFunction]}
    onOpen={[MockFunction]}
    onSubmit={[MockFunction]}
    sentTimeout={0}
    showChannel={true}
    showIcon={false}
    theme={
      Object {
        "button": Object {
          "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
        },
        "colors": Object {
          "background": "#f4f4f7",
          "border": "#d0d8e1",
          "error": "#ec3c3c",
          "primary": "#0088ff",
          "secondary": "#222c4f",
          "success": "#3dc86f",
          "text": "#333333",
        },
        "content": Object {
          "borderRadius": "4px",
          "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
          "fontSize": "14px",
          "padding": "0.6em",
        },
        "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
        "header": Object {
          "backgroundColor": "#222c4f",
          "color": "white",
        },
        "image": Object {
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "height": "140px",
        },
        "input": Object {
          "backgroundColor": "white",
          "borderRadius": "4px",
          "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
          "color": "#444444",
          "fontSize": "14px",
          "padding": "0.5em",
        },
        "label": Object {
          "color": "#0087ff",
          "fontSize": "11px",
        },
        "loader": Object {
          "color": "#ffffff",
          "size": "4em",
          "width": "3px",
        },
        "overlay": Object {
          "backgroundColor": "rgba(34, 44, 79, 0.4)",
        },
        "tab": Object {
          "backgroundColor": "rgba(255, 255, 255, 0.5)",
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "selectedBackgroundColor": "#0087ff",
          "selectedColor": "white",
        },
        "trigger": Object {
          "backgroundColor": "#ffffff",
          "border": "none",
          "borderRadius": "30px",
          "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
          "color": "#333333",
          "fontSize": "13px",
          "fontWeight": "normal",
          "hoverBackgroundColor": "inherit",
          "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
          "hoverColor": "inherit",
          "padding": "12px 1.25em",
        },
        "uploadButton": Object {
          "backgroundColor": "white",
          "border": "1px solid #d0d8e1",
          "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
        },
      }
    }
    translations={
      Object {
        "checkbox.option": "Send url with feedback",
        "close": "close",
        "error.archived": "Channel is Archived!",
        "error.badrequest": "Bad Request!",
        "error.forbidden": "Forbidden!",
        "error.internal": "Server Error!",
        "error.notfound": "Channel Not Found!",
        "error.unexpected": "Unexpected error!",
        "error.upload": "Error uploading image!",
        "feedback.type.bug": "Bug",
        "feedback.type.feature": "Feature",
        "feedback.type.improvement": "Improvement",
        "footer.text": "React Slack Feedback",
        "header.title": "Send Feedback",
        "image.remove": "Remove",
        "label.channel": "Channel",
        "label.message": "Message",
        "label.type": "Feedback Type",
        "placeholder": "Your message...",
        "submit.sending": "Sending feedback...",
        "submit.sent": "Sent!",
        "submit.text": "Send Feedback",
        "trigger.text": "Send Feedback",
        "upload.text": "Attach Image",
      }
    }
    user="unit-tester"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <UNDEFINED
        className=""
      >
        <UNDEFINED
          className="fadeInUp"
        >
          <UNDEFINED>
             
            Send Feedback
            <UNDEFINED
              className="close"
              onClick={[Function]}
            >
              close
            </UNDEFINED>
          </UNDEFINED>
          <UNDEFINED>
            <span
              id="channel"
            >
              <UNDEFINED
                htmlFor="channel"
              >
                Channel
              </UNDEFINED>
              <UNDEFINED
                as="input"
                disabled={true}
                value="#tests"
              />
            </span>
            <UNDEFINED>
              Feedback Type
            </UNDEFINED>
            <UNDEFINED>
              <li
                className="selected"
                onClick={[Function]}
                title="Bug"
              >
                Bug
              </li>
              <li
                className=""
                onClick={[Function]}
                title="Improvement"
              >
                Improvement
              </li>
              <li
                className=""
                onClick={[Function]}
                title="Feature"
              >
                Feature
              </li>
            </UNDEFINED>
            <UNDEFINED>
              Message
            </UNDEFINED>
            <UNDEFINED
              as="textarea"
              name="message"
              onChange={[Function]}
              placeholder="Your message..."
              value=""
            />
            <UNDEFINED>
              <UNDEFINED
                htmlFor="imageUpload"
              >
                Attach Image
              </UNDEFINED>
              <UNDEFINED
                accept="image/*"
                as="input"
                id="imageUpload"
                onChange={[Function]}
                type="file"
              />
            </UNDEFINED>
            <UNDEFINED>
              <UNDEFINED
                checked={true}
                id="sendURL"
                onChange={[Function]}
                type="checkbox"
              />
              <UNDEFINED
                htmlFor="sendURL"
              >
                Send url with feedback
              </UNDEFINED>
            </UNDEFINED>
            <UNDEFINED
              className=""
              disabled={true}
              onClick={[Function]}
            >
              Send Feedback
            </UNDEFINED>
          </UNDEFINED>
        </UNDEFINED>
        <UNDEFINED
          className=""
          onClick={[Function]}
        >
           
          Send Feedback
        </UNDEFINED>
      </UNDEFINED>,
      "theme": Object {
        "button": Object {
          "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
        },
        "colors": Object {
          "background": "#f4f4f7",
          "border": "#d0d8e1",
          "error": "#ec3c3c",
          "primary": "#0088ff",
          "secondary": "#222c4f",
          "success": "#3dc86f",
          "text": "#333333",
        },
        "content": Object {
          "borderRadius": "4px",
          "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
          "fontSize": "14px",
          "padding": "0.6em",
        },
        "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
        "header": Object {
          "backgroundColor": "#222c4f",
          "color": "white",
        },
        "image": Object {
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "height": "140px",
        },
        "input": Object {
          "backgroundColor": "white",
          "borderRadius": "4px",
          "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
          "color": "#444444",
          "fontSize": "14px",
          "padding": "0.5em",
        },
        "label": Object {
          "color": "#0087ff",
          "fontSize": "11px",
        },
        "loader": Object {
          "color": "#ffffff",
          "size": "4em",
          "width": "3px",
        },
        "overlay": Object {
          "backgroundColor": "rgba(34, 44, 79, 0.4)",
        },
        "tab": Object {
          "backgroundColor": "rgba(255, 255, 255, 0.5)",
          "border": "1px solid #d0d8e1",
          "borderRadius": "4px",
          "selectedBackgroundColor": "#0087ff",
          "selectedColor": "white",
        },
        "trigger": Object {
          "backgroundColor": "#ffffff",
          "border": "none",
          "borderRadius": "30px",
          "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
          "color": "#333333",
          "fontSize": "13px",
          "fontWeight": "normal",
          "hoverBackgroundColor": "inherit",
          "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
          "hoverColor": "inherit",
          "padding": "12px 1.25em",
        },
        "uploadButton": Object {
          "backgroundColor": "white",
          "border": "1px solid #d0d8e1",
          "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
        },
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <UNDEFINED
            className="fadeInUp"
          >
            <UNDEFINED>
               
              Send Feedback
              <UNDEFINED
                className="close"
                onClick={[Function]}
              >
                close
              </UNDEFINED>
            </UNDEFINED>
            <UNDEFINED>
              <span
                id="channel"
              >
                <UNDEFINED
                  htmlFor="channel"
                >
                  Channel
                </UNDEFINED>
                <UNDEFINED
                  as="input"
                  disabled={true}
                  value="#tests"
                />
              </span>
              <UNDEFINED>
                Feedback Type
              </UNDEFINED>
              <UNDEFINED>
                <li
                  className="selected"
                  onClick={[Function]}
                  title="Bug"
                >
                  Bug
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Improvement"
                >
                  Improvement
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Feature"
                >
                  Feature
                </li>
              </UNDEFINED>
              <UNDEFINED>
                Message
              </UNDEFINED>
              <UNDEFINED
                as="textarea"
                name="message"
                onChange={[Function]}
                placeholder="Your message..."
                value=""
              />
              <UNDEFINED>
                <UNDEFINED
                  htmlFor="imageUpload"
                >
                  Attach Image
                </UNDEFINED>
                <UNDEFINED
                  accept="image/*"
                  as="input"
                  id="imageUpload"
                  onChange={[Function]}
                  type="file"
                />
              </UNDEFINED>
              <UNDEFINED>
                <UNDEFINED
                  checked={true}
                  id="sendURL"
                  onChange={[Function]}
                  type="checkbox"
                />
                <UNDEFINED
                  htmlFor="sendURL"
                >
                  Send url with feedback
                </UNDEFINED>
              </UNDEFINED>
              <UNDEFINED
                className=""
                disabled={true}
                onClick={[Function]}
              >
                Send Feedback
              </UNDEFINED>
            </UNDEFINED>
          </UNDEFINED>,
          <UNDEFINED
            className=""
            onClick={[Function]}
          >
             
            Send Feedback
          </UNDEFINED>,
        ],
        "className": "",
      },
      "ref": Object {
        "current": null,
      },
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <UNDEFINED>
                 
                Send Feedback
                <UNDEFINED
                  className="close"
                  onClick={[Function]}
                >
                  close
                </UNDEFINED>
              </UNDEFINED>,
              <UNDEFINED>
                <span
                  id="channel"
                >
                  <UNDEFINED
                    htmlFor="channel"
                  >
                    Channel
                  </UNDEFINED>
                  <UNDEFINED
                    as="input"
                    disabled={true}
                    value="#tests"
                  />
                </span>
                <UNDEFINED>
                  Feedback Type
                </UNDEFINED>
                <UNDEFINED>
                  <li
                    className="selected"
                    onClick={[Function]}
                    title="Bug"
                  >
                    Bug
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Improvement"
                  >
                    Improvement
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Feature"
                  >
                    Feature
                  </li>
                </UNDEFINED>
                <UNDEFINED>
                  Message
                </UNDEFINED>
                <UNDEFINED
                  as="textarea"
                  name="message"
                  onChange={[Function]}
                  placeholder="Your message..."
                  value=""
                />
                <UNDEFINED>
                  <UNDEFINED
                    htmlFor="imageUpload"
                  >
                    Attach Image
                  </UNDEFINED>
                  <UNDEFINED
                    accept="image/*"
                    as="input"
                    id="imageUpload"
                    onChange={[Function]}
                    type="file"
                  />
                </UNDEFINED>
                <UNDEFINED>
                  <UNDEFINED
                    checked={true}
                    id="sendURL"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <UNDEFINED
                    htmlFor="sendURL"
                  >
                    Send url with feedback
                  </UNDEFINED>
                </UNDEFINED>
                <UNDEFINED
                  className=""
                  disabled={true}
                  onClick={[Function]}
                >
                  Send Feedback
                </UNDEFINED>
              </UNDEFINED>,
            ],
            "className": "fadeInUp",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  null,
                  " ",
                  "Send Feedback",
                  <UNDEFINED
                    className="close"
                    onClick={[Function]}
                  >
                    close
                  </UNDEFINED>,
                ],
              },
              "ref": null,
              "rendered": Array [
                null,
                " ",
                "Send Feedback",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "close",
                    "className": "close",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "close",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__CloseButton-kxzKQm",
                      "isStatic": true,
                      "rules": Array [
                        "cursor:pointer;opacity:0.7;margin-left:auto;font-size:11px;&:hover{opacity:1;}",
                      ],
                    },
                    "displayName": "styles__CloseButton",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__CloseButton-kxzKQm",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "styles__Header-gpCiqM",
                  "isStatic": false,
                  "rules": Array [
                    "display:flex;color:",
                    [Function],
                    ";background:",
                    [Function],
                    ";padding:0.75em 1em;border-radius:3px 3px 0 0;font-size:14px;font-weight:300;align-items:center;> img{margin-right:0.5em;}",
                  ],
                },
                "displayName": "styles__Header",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "styles__Header-gpCiqM",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <span
                    id="channel"
                  >
                    <UNDEFINED
                      htmlFor="channel"
                    >
                      Channel
                    </UNDEFINED>
                    <UNDEFINED
                      as="input"
                      disabled={true}
                      value="#tests"
                    />
                  </span>,
                  <UNDEFINED>
                    Feedback Type
                  </UNDEFINED>,
                  <UNDEFINED>
                    <li
                      className="selected"
                      onClick={[Function]}
                      title="Bug"
                    >
                      Bug
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Improvement"
                    >
                      Improvement
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Feature"
                    >
                      Feature
                    </li>
                  </UNDEFINED>,
                  <UNDEFINED>
                    Message
                  </UNDEFINED>,
                  <UNDEFINED
                    as="textarea"
                    name="message"
                    onChange={[Function]}
                    placeholder="Your message..."
                    value=""
                  />,
                  <UNDEFINED>
                    <UNDEFINED
                      htmlFor="imageUpload"
                    >
                      Attach Image
                    </UNDEFINED>
                    <UNDEFINED
                      accept="image/*"
                      as="input"
                      id="imageUpload"
                      onChange={[Function]}
                      type="file"
                    />
                  </UNDEFINED>,
                  <UNDEFINED>
                    <UNDEFINED
                      checked={true}
                      id="sendURL"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    <UNDEFINED
                      htmlFor="sendURL"
                    >
                      Send url with feedback
                    </UNDEFINED>
                  </UNDEFINED>,
                  <UNDEFINED
                    className=""
                    disabled={true}
                    onClick={[Function]}
                  >
                    Send Feedback
                  </UNDEFINED>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <UNDEFINED
                        htmlFor="channel"
                      >
                        Channel
                      </UNDEFINED>,
                      <UNDEFINED
                        as="input"
                        disabled={true}
                        value="#tests"
                      />,
                    ],
                    "id": "channel",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Channel",
                        "htmlFor": "channel",
                      },
                      "ref": null,
                      "rendered": "Channel",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__Label-eHLCPc",
                          "isStatic": false,
                          "rules": Array [
                            "color:",
                            [Function],
                            ";display:block;font-size:",
                            [Function],
                            ";margin:5px 0;",
                          ],
                        },
                        "displayName": "styles__Label",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__Label-eHLCPc",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "as": "input",
                        "disabled": true,
                        "value": "#tests",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__FormElement-bDQwuf",
                          "isStatic": false,
                          "rules": Array [
                            "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                            ";box-sizing:border-box;",
                            ";width:100%;color:",
                            [Function],
                            ";border:",
                            [Function],
                            ";border-radius:",
                            [Function],
                            ";padding:",
                            [Function],
                            ";font-size:",
                            [Function],
                            ";background:",
                            [Function],
                            ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                            [Function],
                            ";box-shadow:",
                            [Function],
                            ";}&[disabled],&.disabled{background:",
                            [Function],
                            ";pointer-events:none;color:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "styles__FormElement",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__FormElement-bDQwuf",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Feedback Type",
                  },
                  "ref": null,
                  "rendered": "Feedback Type",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__Label-eHLCPc",
                      "isStatic": false,
                      "rules": Array [
                        "color:",
                        [Function],
                        ";display:block;font-size:",
                        [Function],
                        ";margin:5px 0;",
                      ],
                    },
                    "displayName": "styles__Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__Label-eHLCPc",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <li
                        className="selected"
                        onClick={[Function]}
                        title="Bug"
                      >
                        Bug
                      </li>,
                      <li
                        className=""
                        onClick={[Function]}
                        title="Improvement"
                      >
                        Improvement
                      </li>,
                      <li
                        className=""
                        onClick={[Function]}
                        title="Feature"
                      >
                        Feature
                      </li>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": "bug",
                      "nodeType": "host",
                      "props": Object {
                        "children": "Bug",
                        "className": "selected",
                        "onClick": [Function],
                        "title": "Bug",
                      },
                      "ref": null,
                      "rendered": "Bug",
                      "type": "li",
                    },
                    Object {
                      "instance": null,
                      "key": "improvement",
                      "nodeType": "host",
                      "props": Object {
                        "children": "Improvement",
                        "className": "",
                        "onClick": [Function],
                        "title": "Improvement",
                      },
                      "ref": null,
                      "rendered": "Improvement",
                      "type": "li",
                    },
                    Object {
                      "instance": null,
                      "key": "feature",
                      "nodeType": "host",
                      "props": Object {
                        "children": "Feature",
                        "className": "",
                        "onClick": [Function],
                        "title": "Feature",
                      },
                      "ref": null,
                      "rendered": "Feature",
                      "type": "li",
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__Tabs-dAptag",
                      "isStatic": false,
                      "rules": Array [
                        "display:flex;list-style:none;padding:0;margin:0;margin-bottom:1em;> li{flex:1 0 calc(100% / 3);user-select:none;background:",
                        [Function],
                        ";color:",
                        [Function],
                        ";text-align:center;padding:0.75em;font-size:13px;cursor:pointer;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border:",
                        [Function],
                        ";&.selected{border-color:",
                        [Function],
                        ";background:",
                        [Function],
                        ";color:white;position:relative;}&:hover:not(.selected){border:",
                        [Function],
                        ";}&:first-of-type{border-radius:4px 0 0 4px;margin-right:-1px;}&:last-of-type{border-radius:0 4px 4px 0;margin-left:-1px;}}",
                      ],
                    },
                    "displayName": "styles__Tabs",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__Tabs-dAptag",
                    "target": "ul",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Message",
                  },
                  "ref": null,
                  "rendered": "Message",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__Label-eHLCPc",
                      "isStatic": false,
                      "rules": Array [
                        "color:",
                        [Function],
                        ";display:block;font-size:",
                        [Function],
                        ";margin:5px 0;",
                      ],
                    },
                    "displayName": "styles__Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__Label-eHLCPc",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "as": "textarea",
                    "name": "message",
                    "onChange": [Function],
                    "placeholder": "Your message...",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__FormElement-bDQwuf",
                      "isStatic": false,
                      "rules": Array [
                        "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                        ";box-sizing:border-box;",
                        ";width:100%;color:",
                        [Function],
                        ";border:",
                        [Function],
                        ";border-radius:",
                        [Function],
                        ";padding:",
                        [Function],
                        ";font-size:",
                        [Function],
                        ";background:",
                        [Function],
                        ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                        [Function],
                        ";box-shadow:",
                        [Function],
                        ";}&[disabled],&.disabled{background:",
                        [Function],
                        ";pointer-events:none;color:",
                        [Function],
                        ";}",
                      ],
                    },
                    "displayName": "styles__FormElement",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__FormElement-bDQwuf",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <UNDEFINED
                        htmlFor="imageUpload"
                      >
                        Attach Image
                      </UNDEFINED>,
                      <UNDEFINED
                        accept="image/*"
                        as="input"
                        id="imageUpload"
                        onChange={[Function]}
                        type="file"
                      />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Attach Image",
                        "htmlFor": "imageUpload",
                      },
                      "ref": null,
                      "rendered": "Attach Image",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__UploadButton-dKkAQc",
                          "isStatic": false,
                          "rules": Array [
                            "color:",
                            [Function],
                            ";background:",
                            [Function],
                            ";border:",
                            [Function],
                            ";padding:0.75em 3em;text-align:center;font-size:",
                            [Function],
                            ";margin:auto;width:100%;display:table;cursor:pointer;border-radius:4px;&:hover{background:",
                            [Function],
                            ";color:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "styles__UploadButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__UploadButton-dKkAQc",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "accept": "image/*",
                        "as": "input",
                        "id": "imageUpload",
                        "onChange": [Function],
                        "type": "file",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__FormElement-bDQwuf",
                          "isStatic": false,
                          "rules": Array [
                            "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                            ";box-sizing:border-box;",
                            ";width:100%;color:",
                            [Function],
                            ";border:",
                            [Function],
                            ";border-radius:",
                            [Function],
                            ";padding:",
                            [Function],
                            ";font-size:",
                            [Function],
                            ";background:",
                            [Function],
                            ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                            [Function],
                            ";box-shadow:",
                            [Function],
                            ";}&[disabled],&.disabled{background:",
                            [Function],
                            ";pointer-events:none;color:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "styles__FormElement",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__FormElement-bDQwuf",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__ImageUpload-jMrDzo",
                      "isStatic": true,
                      "rules": Array [
                        "> input{display:none;}",
                      ],
                    },
                    "displayName": "styles__ImageUpload",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__ImageUpload-jMrDzo",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <UNDEFINED
                        checked={true}
                        id="sendURL"
                        onChange={[Function]}
                        type="checkbox"
                      />,
                      <UNDEFINED
                        htmlFor="sendURL"
                      >
                        Send url with feedback
                      </UNDEFINED>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "checked": true,
                        "id": "sendURL",
                        "onChange": [Function],
                        "type": "checkbox",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__Checkbox-gDImgc",
                          "isStatic": true,
                          "rules": Array [
                            "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                            ";box-sizing:border-box;",
                            ";appearance:checkbox;position:static;font-size:1.1em;&::before,&::after{content:none;}",
                          ],
                        },
                        "displayName": "styles__Checkbox",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__Checkbox-gDImgc",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Send url with feedback",
                        "htmlFor": "sendURL",
                      },
                      "ref": null,
                      "rendered": "Send url with feedback",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__CheckboxLabel-iljvce",
                          "isStatic": true,
                          "rules": Array [
                            "display:inline-block;margin-left:10px;color:inherit;font-size:13px;color:#858ba0;cursor:pointer;&:hover{color:#858ba0;}",
                          ],
                        },
                        "displayName": "styles__CheckboxLabel",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__CheckboxLabel-iljvce",
                        "target": "label",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__CheckboxContainer-ESvur",
                      "isStatic": true,
                      "rules": Array [
                        "padding:0.5em 0 1em;",
                      ],
                    },
                    "displayName": "styles__CheckboxContainer",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__CheckboxContainer-ESvur",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Send Feedback",
                    "className": "",
                    "disabled": true,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Send Feedback",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "styles__SubmitButton-hvIGQG",
                      "isStatic": false,
                      "rules": Array [
                        "display:block;width:100%;padding:1em 0.75em;text-align:center;background:",
                        [Function],
                        ";color:white;font-weight:400;outline:none;border:none;font-size:11px;text-transform:uppercase;letter-spacing:0.5px;border-radius:4px;cursor:pointer;transition:background 0.2s,box-shadow 0.2s;&[disabled],&.disabled{pointer-events:none;opacity:0.8;}&.sent{background:",
                        [Function],
                        ";pointer-events:none;opacity:1;}&.error{background:",
                        [Function],
                        ";pointer-events:none;opacity:1;}&:hover{background:",
                        [Function],
                        ";box-shadow:none;}",
                      ],
                    },
                    "displayName": "styles__SubmitButton",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "styles__SubmitButton-hvIGQG",
                    "target": "button",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "styles__Content-ikKqwP",
                  "isStatic": false,
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "styles__Content",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "styles__Content-ikKqwP",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styles__Container-kwWyMt",
              "isStatic": false,
              "rules": Array [
                "display:none;background:",
                [Function],
                ";position:relative;z-index:999999999;border-radius:4px;margin-bottom:1.5em;width:",
                [Function],
                ";top:-2.5em;right:0;box-shadow:",
                [Function],
                ";",
                "animation:",
                Keyframes {
                  "id": "sc-keyframes-cryAyx",
                  "inject": [Function],
                  "name": "cryAyx",
                  "rules": Array [
                    "@-webkit-keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                    "@keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                  ],
                  "toString": [Function],
                },
                " 0.4s ease;animation-fill-mode:both;",
                ";&.active{",
                "animation:",
                Keyframes {
                  "id": "sc-keyframes-QWJjr",
                  "inject": [Function],
                  "name": "QWJjr",
                  "rules": Array [
                    "@-webkit-keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                    "@keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                  ],
                  "toString": [Function],
                },
                " 0.4s ease;animation-fill-mode:both;",
                ";display:block;}",
              ],
            },
            "displayName": "styles__Container",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styles__Container-kwWyMt",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              null,
              " ",
              "Send Feedback",
            ],
            "className": "",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            null,
            " ",
            "Send Feedback",
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styles__Trigger-jTszNK",
              "isStatic": false,
              "rules": Array [
                "display:flex;align-items:center;position:absolute;right:0;bottom:0;align-items:center;font-weight:",
                [Function],
                ";background:",
                [Function],
                ";color:",
                [Function],
                ";border:1px solid ",
                [Function],
                ";white-space:nowrap;padding:",
                [Function],
                ";border-radius:",
                [Function],
                ";cursor:pointer;font-size:",
                [Function],
                ";box-shadow:",
                [Function],
                ";transition:box-shadow 0.3s,transform 0.2s ease-in,color 0.2s;&:hover{box-shadow:",
                [Function],
                ";background-color:",
                [Function],
                " transform:translateY(-1px);color:",
                [Function],
                ";border-color:",
                [Function],
                ";}img{margin-right:8px;}",
              ],
            },
            "displayName": "styles__Trigger",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styles__Trigger-jTszNK",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "styles__SlackFeedback-bbGQkf",
          "isStatic": false,
          "rules": Array [
            "position:fixed;font-family:",
            [Function],
            ";z-index:99999998;bottom:12px;right:0;margin:1em;*{box-sizing:border-box;}textarea{min-height:150px;}",
          ],
        },
        "displayName": "styles__SlackFeedback",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "styles__SlackFeedback-bbGQkf",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <UNDEFINED
          className=""
        >
          <UNDEFINED
            className="fadeInUp"
          >
            <UNDEFINED>
               
              Send Feedback
              <UNDEFINED
                className="close"
                onClick={[Function]}
              >
                close
              </UNDEFINED>
            </UNDEFINED>
            <UNDEFINED>
              <span
                id="channel"
              >
                <UNDEFINED
                  htmlFor="channel"
                >
                  Channel
                </UNDEFINED>
                <UNDEFINED
                  as="input"
                  disabled={true}
                  value="#tests"
                />
              </span>
              <UNDEFINED>
                Feedback Type
              </UNDEFINED>
              <UNDEFINED>
                <li
                  className="selected"
                  onClick={[Function]}
                  title="Bug"
                >
                  Bug
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Improvement"
                >
                  Improvement
                </li>
                <li
                  className=""
                  onClick={[Function]}
                  title="Feature"
                >
                  Feature
                </li>
              </UNDEFINED>
              <UNDEFINED>
                Message
              </UNDEFINED>
              <UNDEFINED
                as="textarea"
                name="message"
                onChange={[Function]}
                placeholder="Your message..."
                value=""
              />
              <UNDEFINED>
                <UNDEFINED
                  htmlFor="imageUpload"
                >
                  Attach Image
                </UNDEFINED>
                <UNDEFINED
                  accept="image/*"
                  as="input"
                  id="imageUpload"
                  onChange={[Function]}
                  type="file"
                />
              </UNDEFINED>
              <UNDEFINED>
                <UNDEFINED
                  checked={true}
                  id="sendURL"
                  onChange={[Function]}
                  type="checkbox"
                />
                <UNDEFINED
                  htmlFor="sendURL"
                >
                  Send url with feedback
                </UNDEFINED>
              </UNDEFINED>
              <UNDEFINED
                className=""
                disabled={true}
                onClick={[Function]}
              >
                Send Feedback
              </UNDEFINED>
            </UNDEFINED>
          </UNDEFINED>
          <UNDEFINED
            className=""
            onClick={[Function]}
          >
             
            Send Feedback
          </UNDEFINED>
        </UNDEFINED>,
        "theme": Object {
          "button": Object {
            "boxShadow": "0 2px 8px 2px rgba(0, 135, 255, 0.2)",
          },
          "colors": Object {
            "background": "#f4f4f7",
            "border": "#d0d8e1",
            "error": "#ec3c3c",
            "primary": "#0088ff",
            "secondary": "#222c4f",
            "success": "#3dc86f",
            "text": "#333333",
          },
          "content": Object {
            "borderRadius": "4px",
            "boxShadow": "0 6px 30px 2px rgba(34, 44, 79, 0.3)",
            "fontSize": "14px",
            "padding": "0.6em",
          },
          "fontFamily": "-apple-system, BlinkMacSystemFont, Arial, Arial Unicode, \\"Helvetica Neue\\", Helvetica, \\"Hiragino Sans GB\\", \\"Microsoft YaHei\\", SimSun, sans-serif",
          "header": Object {
            "backgroundColor": "#222c4f",
            "color": "white",
          },
          "image": Object {
            "border": "1px solid #d0d8e1",
            "borderRadius": "4px",
            "height": "140px",
          },
          "input": Object {
            "backgroundColor": "white",
            "borderRadius": "4px",
            "boxShadow": "0 0 8px rgba(0, 135, 255, 0.3)",
            "color": "#444444",
            "fontSize": "14px",
            "padding": "0.5em",
          },
          "label": Object {
            "color": "#0087ff",
            "fontSize": "11px",
          },
          "loader": Object {
            "color": "#ffffff",
            "size": "4em",
            "width": "3px",
          },
          "overlay": Object {
            "backgroundColor": "rgba(34, 44, 79, 0.4)",
          },
          "tab": Object {
            "backgroundColor": "rgba(255, 255, 255, 0.5)",
            "border": "1px solid #d0d8e1",
            "borderRadius": "4px",
            "selectedBackgroundColor": "#0087ff",
            "selectedColor": "white",
          },
          "trigger": Object {
            "backgroundColor": "#ffffff",
            "border": "none",
            "borderRadius": "30px",
            "boxShadow": "0 3px 12px 1px rgba(34, 44, 79, 0.1)",
            "color": "#333333",
            "fontSize": "13px",
            "fontWeight": "normal",
            "hoverBackgroundColor": "inherit",
            "hoverBoxShadow": "0 6px 16px 2px rgba(0, 0, 0, 0.2)",
            "hoverColor": "inherit",
            "padding": "12px 1.25em",
          },
          "uploadButton": Object {
            "backgroundColor": "white",
            "border": "1px solid #d0d8e1",
            "hoverBackgroundColor": "rgba(255, 255, 255, 0.6)",
          },
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <UNDEFINED
              className="fadeInUp"
            >
              <UNDEFINED>
                 
                Send Feedback
                <UNDEFINED
                  className="close"
                  onClick={[Function]}
                >
                  close
                </UNDEFINED>
              </UNDEFINED>
              <UNDEFINED>
                <span
                  id="channel"
                >
                  <UNDEFINED
                    htmlFor="channel"
                  >
                    Channel
                  </UNDEFINED>
                  <UNDEFINED
                    as="input"
                    disabled={true}
                    value="#tests"
                  />
                </span>
                <UNDEFINED>
                  Feedback Type
                </UNDEFINED>
                <UNDEFINED>
                  <li
                    className="selected"
                    onClick={[Function]}
                    title="Bug"
                  >
                    Bug
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Improvement"
                  >
                    Improvement
                  </li>
                  <li
                    className=""
                    onClick={[Function]}
                    title="Feature"
                  >
                    Feature
                  </li>
                </UNDEFINED>
                <UNDEFINED>
                  Message
                </UNDEFINED>
                <UNDEFINED
                  as="textarea"
                  name="message"
                  onChange={[Function]}
                  placeholder="Your message..."
                  value=""
                />
                <UNDEFINED>
                  <UNDEFINED
                    htmlFor="imageUpload"
                  >
                    Attach Image
                  </UNDEFINED>
                  <UNDEFINED
                    accept="image/*"
                    as="input"
                    id="imageUpload"
                    onChange={[Function]}
                    type="file"
                  />
                </UNDEFINED>
                <UNDEFINED>
                  <UNDEFINED
                    checked={true}
                    id="sendURL"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <UNDEFINED
                    htmlFor="sendURL"
                  >
                    Send url with feedback
                  </UNDEFINED>
                </UNDEFINED>
                <UNDEFINED
                  className=""
                  disabled={true}
                  onClick={[Function]}
                >
                  Send Feedback
                </UNDEFINED>
              </UNDEFINED>
            </UNDEFINED>,
            <UNDEFINED
              className=""
              onClick={[Function]}
            >
               
              Send Feedback
            </UNDEFINED>,
          ],
          "className": "",
        },
        "ref": Object {
          "current": null,
        },
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <UNDEFINED>
                   
                  Send Feedback
                  <UNDEFINED
                    className="close"
                    onClick={[Function]}
                  >
                    close
                  </UNDEFINED>
                </UNDEFINED>,
                <UNDEFINED>
                  <span
                    id="channel"
                  >
                    <UNDEFINED
                      htmlFor="channel"
                    >
                      Channel
                    </UNDEFINED>
                    <UNDEFINED
                      as="input"
                      disabled={true}
                      value="#tests"
                    />
                  </span>
                  <UNDEFINED>
                    Feedback Type
                  </UNDEFINED>
                  <UNDEFINED>
                    <li
                      className="selected"
                      onClick={[Function]}
                      title="Bug"
                    >
                      Bug
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Improvement"
                    >
                      Improvement
                    </li>
                    <li
                      className=""
                      onClick={[Function]}
                      title="Feature"
                    >
                      Feature
                    </li>
                  </UNDEFINED>
                  <UNDEFINED>
                    Message
                  </UNDEFINED>
                  <UNDEFINED
                    as="textarea"
                    name="message"
                    onChange={[Function]}
                    placeholder="Your message..."
                    value=""
                  />
                  <UNDEFINED>
                    <UNDEFINED
                      htmlFor="imageUpload"
                    >
                      Attach Image
                    </UNDEFINED>
                    <UNDEFINED
                      accept="image/*"
                      as="input"
                      id="imageUpload"
                      onChange={[Function]}
                      type="file"
                    />
                  </UNDEFINED>
                  <UNDEFINED>
                    <UNDEFINED
                      checked={true}
                      id="sendURL"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    <UNDEFINED
                      htmlFor="sendURL"
                    >
                      Send url with feedback
                    </UNDEFINED>
                  </UNDEFINED>
                  <UNDEFINED
                    className=""
                    disabled={true}
                    onClick={[Function]}
                  >
                    Send Feedback
                  </UNDEFINED>
                </UNDEFINED>,
              ],
              "className": "fadeInUp",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    null,
                    " ",
                    "Send Feedback",
                    <UNDEFINED
                      className="close"
                      onClick={[Function]}
                    >
                      close
                    </UNDEFINED>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  null,
                  " ",
                  "Send Feedback",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "close",
                      "className": "close",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "close",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__CloseButton-kxzKQm",
                        "isStatic": true,
                        "rules": Array [
                          "cursor:pointer;opacity:0.7;margin-left:auto;font-size:11px;&:hover{opacity:1;}",
                        ],
                      },
                      "displayName": "styles__CloseButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__CloseButton-kxzKQm",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "styles__Header-gpCiqM",
                    "isStatic": false,
                    "rules": Array [
                      "display:flex;color:",
                      [Function],
                      ";background:",
                      [Function],
                      ";padding:0.75em 1em;border-radius:3px 3px 0 0;font-size:14px;font-weight:300;align-items:center;> img{margin-right:0.5em;}",
                    ],
                  },
                  "displayName": "styles__Header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "styles__Header-gpCiqM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <span
                      id="channel"
                    >
                      <UNDEFINED
                        htmlFor="channel"
                      >
                        Channel
                      </UNDEFINED>
                      <UNDEFINED
                        as="input"
                        disabled={true}
                        value="#tests"
                      />
                    </span>,
                    <UNDEFINED>
                      Feedback Type
                    </UNDEFINED>,
                    <UNDEFINED>
                      <li
                        className="selected"
                        onClick={[Function]}
                        title="Bug"
                      >
                        Bug
                      </li>
                      <li
                        className=""
                        onClick={[Function]}
                        title="Improvement"
                      >
                        Improvement
                      </li>
                      <li
                        className=""
                        onClick={[Function]}
                        title="Feature"
                      >
                        Feature
                      </li>
                    </UNDEFINED>,
                    <UNDEFINED>
                      Message
                    </UNDEFINED>,
                    <UNDEFINED
                      as="textarea"
                      name="message"
                      onChange={[Function]}
                      placeholder="Your message..."
                      value=""
                    />,
                    <UNDEFINED>
                      <UNDEFINED
                        htmlFor="imageUpload"
                      >
                        Attach Image
                      </UNDEFINED>
                      <UNDEFINED
                        accept="image/*"
                        as="input"
                        id="imageUpload"
                        onChange={[Function]}
                        type="file"
                      />
                    </UNDEFINED>,
                    <UNDEFINED>
                      <UNDEFINED
                        checked={true}
                        id="sendURL"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <UNDEFINED
                        htmlFor="sendURL"
                      >
                        Send url with feedback
                      </UNDEFINED>
                    </UNDEFINED>,
                    <UNDEFINED
                      className=""
                      disabled={true}
                      onClick={[Function]}
                    >
                      Send Feedback
                    </UNDEFINED>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <UNDEFINED
                          htmlFor="channel"
                        >
                          Channel
                        </UNDEFINED>,
                        <UNDEFINED
                          as="input"
                          disabled={true}
                          value="#tests"
                        />,
                      ],
                      "id": "channel",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Channel",
                          "htmlFor": "channel",
                        },
                        "ref": null,
                        "rendered": "Channel",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__Label-eHLCPc",
                            "isStatic": false,
                            "rules": Array [
                              "color:",
                              [Function],
                              ";display:block;font-size:",
                              [Function],
                              ";margin:5px 0;",
                            ],
                          },
                          "displayName": "styles__Label",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__Label-eHLCPc",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": "input",
                          "disabled": true,
                          "value": "#tests",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__FormElement-bDQwuf",
                            "isStatic": false,
                            "rules": Array [
                              "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                              ";box-sizing:border-box;",
                              ";width:100%;color:",
                              [Function],
                              ";border:",
                              [Function],
                              ";border-radius:",
                              [Function],
                              ";padding:",
                              [Function],
                              ";font-size:",
                              [Function],
                              ";background:",
                              [Function],
                              ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                              [Function],
                              ";box-shadow:",
                              [Function],
                              ";}&[disabled],&.disabled{background:",
                              [Function],
                              ";pointer-events:none;color:",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "styles__FormElement",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__FormElement-bDQwuf",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": "span",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Feedback Type",
                    },
                    "ref": null,
                    "rendered": "Feedback Type",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Label-eHLCPc",
                        "isStatic": false,
                        "rules": Array [
                          "color:",
                          [Function],
                          ";display:block;font-size:",
                          [Function],
                          ";margin:5px 0;",
                        ],
                      },
                      "displayName": "styles__Label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Label-eHLCPc",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <li
                          className="selected"
                          onClick={[Function]}
                          title="Bug"
                        >
                          Bug
                        </li>,
                        <li
                          className=""
                          onClick={[Function]}
                          title="Improvement"
                        >
                          Improvement
                        </li>,
                        <li
                          className=""
                          onClick={[Function]}
                          title="Feature"
                        >
                          Feature
                        </li>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": "bug",
                        "nodeType": "host",
                        "props": Object {
                          "children": "Bug",
                          "className": "selected",
                          "onClick": [Function],
                          "title": "Bug",
                        },
                        "ref": null,
                        "rendered": "Bug",
                        "type": "li",
                      },
                      Object {
                        "instance": null,
                        "key": "improvement",
                        "nodeType": "host",
                        "props": Object {
                          "children": "Improvement",
                          "className": "",
                          "onClick": [Function],
                          "title": "Improvement",
                        },
                        "ref": null,
                        "rendered": "Improvement",
                        "type": "li",
                      },
                      Object {
                        "instance": null,
                        "key": "feature",
                        "nodeType": "host",
                        "props": Object {
                          "children": "Feature",
                          "className": "",
                          "onClick": [Function],
                          "title": "Feature",
                        },
                        "ref": null,
                        "rendered": "Feature",
                        "type": "li",
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Tabs-dAptag",
                        "isStatic": false,
                        "rules": Array [
                          "display:flex;list-style:none;padding:0;margin:0;margin-bottom:1em;> li{flex:1 0 calc(100% / 3);user-select:none;background:",
                          [Function],
                          ";color:",
                          [Function],
                          ";text-align:center;padding:0.75em;font-size:13px;cursor:pointer;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border:",
                          [Function],
                          ";&.selected{border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";color:white;position:relative;}&:hover:not(.selected){border:",
                          [Function],
                          ";}&:first-of-type{border-radius:4px 0 0 4px;margin-right:-1px;}&:last-of-type{border-radius:0 4px 4px 0;margin-left:-1px;}}",
                        ],
                      },
                      "displayName": "styles__Tabs",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Tabs-dAptag",
                      "target": "ul",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Message",
                    },
                    "ref": null,
                    "rendered": "Message",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Label-eHLCPc",
                        "isStatic": false,
                        "rules": Array [
                          "color:",
                          [Function],
                          ";display:block;font-size:",
                          [Function],
                          ";margin:5px 0;",
                        ],
                      },
                      "displayName": "styles__Label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Label-eHLCPc",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "as": "textarea",
                      "name": "message",
                      "onChange": [Function],
                      "placeholder": "Your message...",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__FormElement-bDQwuf",
                        "isStatic": false,
                        "rules": Array [
                          "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                          ";box-sizing:border-box;",
                          ";width:100%;color:",
                          [Function],
                          ";border:",
                          [Function],
                          ";border-radius:",
                          [Function],
                          ";padding:",
                          [Function],
                          ";font-size:",
                          [Function],
                          ";background:",
                          [Function],
                          ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                          [Function],
                          ";box-shadow:",
                          [Function],
                          ";}&[disabled],&.disabled{background:",
                          [Function],
                          ";pointer-events:none;color:",
                          [Function],
                          ";}",
                        ],
                      },
                      "displayName": "styles__FormElement",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__FormElement-bDQwuf",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <UNDEFINED
                          htmlFor="imageUpload"
                        >
                          Attach Image
                        </UNDEFINED>,
                        <UNDEFINED
                          accept="image/*"
                          as="input"
                          id="imageUpload"
                          onChange={[Function]}
                          type="file"
                        />,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Attach Image",
                          "htmlFor": "imageUpload",
                        },
                        "ref": null,
                        "rendered": "Attach Image",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__UploadButton-dKkAQc",
                            "isStatic": false,
                            "rules": Array [
                              "color:",
                              [Function],
                              ";background:",
                              [Function],
                              ";border:",
                              [Function],
                              ";padding:0.75em 3em;text-align:center;font-size:",
                              [Function],
                              ";margin:auto;width:100%;display:table;cursor:pointer;border-radius:4px;&:hover{background:",
                              [Function],
                              ";color:",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "styles__UploadButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__UploadButton-dKkAQc",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "accept": "image/*",
                          "as": "input",
                          "id": "imageUpload",
                          "onChange": [Function],
                          "type": "file",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__FormElement-bDQwuf",
                            "isStatic": false,
                            "rules": Array [
                              "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                              ";box-sizing:border-box;",
                              ";width:100%;color:",
                              [Function],
                              ";border:",
                              [Function],
                              ";border-radius:",
                              [Function],
                              ";padding:",
                              [Function],
                              ";font-size:",
                              [Function],
                              ";background:",
                              [Function],
                              ";margin-bottom:0.75em;outline:none;resize:none;&:focus{border:1px solid ",
                              [Function],
                              ";box-shadow:",
                              [Function],
                              ";}&[disabled],&.disabled{background:",
                              [Function],
                              ";pointer-events:none;color:",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "styles__FormElement",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__FormElement-bDQwuf",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__ImageUpload-jMrDzo",
                        "isStatic": true,
                        "rules": Array [
                          "> input{display:none;}",
                        ],
                      },
                      "displayName": "styles__ImageUpload",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__ImageUpload-jMrDzo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <UNDEFINED
                          checked={true}
                          id="sendURL"
                          onChange={[Function]}
                          type="checkbox"
                        />,
                        <UNDEFINED
                          htmlFor="sendURL"
                        >
                          Send url with feedback
                        </UNDEFINED>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "checked": true,
                          "id": "sendURL",
                          "onChange": [Function],
                          "type": "checkbox",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__Checkbox-gDImgc",
                            "isStatic": true,
                            "rules": Array [
                              "box-shadow:none;color:inherit;margin:inherit;padding:inherit;",
                              ";box-sizing:border-box;",
                              ";appearance:checkbox;position:static;font-size:1.1em;&::before,&::after{content:none;}",
                            ],
                          },
                          "displayName": "styles__Checkbox",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__Checkbox-gDImgc",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Send url with feedback",
                          "htmlFor": "sendURL",
                        },
                        "ref": null,
                        "rendered": "Send url with feedback",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "styles__CheckboxLabel-iljvce",
                            "isStatic": true,
                            "rules": Array [
                              "display:inline-block;margin-left:10px;color:inherit;font-size:13px;color:#858ba0;cursor:pointer;&:hover{color:#858ba0;}",
                            ],
                          },
                          "displayName": "styles__CheckboxLabel",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "styles__CheckboxLabel-iljvce",
                          "target": "label",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__CheckboxContainer-ESvur",
                        "isStatic": true,
                        "rules": Array [
                          "padding:0.5em 0 1em;",
                        ],
                      },
                      "displayName": "styles__CheckboxContainer",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__CheckboxContainer-ESvur",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": "Send Feedback",
                      "className": "",
                      "disabled": true,
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Send Feedback",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__SubmitButton-hvIGQG",
                        "isStatic": false,
                        "rules": Array [
                          "display:block;width:100%;padding:1em 0.75em;text-align:center;background:",
                          [Function],
                          ";color:white;font-weight:400;outline:none;border:none;font-size:11px;text-transform:uppercase;letter-spacing:0.5px;border-radius:4px;cursor:pointer;transition:background 0.2s,box-shadow 0.2s;&[disabled],&.disabled{pointer-events:none;opacity:0.8;}&.sent{background:",
                          [Function],
                          ";pointer-events:none;opacity:1;}&.error{background:",
                          [Function],
                          ";pointer-events:none;opacity:1;}&:hover{background:",
                          [Function],
                          ";box-shadow:none;}",
                        ],
                      },
                      "displayName": "styles__SubmitButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__SubmitButton-hvIGQG",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "styles__Content-ikKqwP",
                    "isStatic": false,
                    "rules": Array [
                      "padding:",
                      [Function],
                      ";",
                    ],
                  },
                  "displayName": "styles__Content",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "styles__Content-ikKqwP",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styles__Container-kwWyMt",
                "isStatic": false,
                "rules": Array [
                  "display:none;background:",
                  [Function],
                  ";position:relative;z-index:999999999;border-radius:4px;margin-bottom:1.5em;width:",
                  [Function],
                  ";top:-2.5em;right:0;box-shadow:",
                  [Function],
                  ";",
                  "animation:",
                  Keyframes {
                    "id": "sc-keyframes-cryAyx",
                    "inject": [Function],
                    "name": "cryAyx",
                    "rules": Array [
                      "@-webkit-keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                      "@keyframes cryAyx{from{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}to{opacity:0;display:none;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}}",
                    ],
                    "toString": [Function],
                  },
                  " 0.4s ease;animation-fill-mode:both;",
                  ";&.active{",
                  "animation:",
                  Keyframes {
                    "id": "sc-keyframes-QWJjr",
                    "inject": [Function],
                    "name": "QWJjr",
                    "rules": Array [
                      "@-webkit-keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                      "@keyframes QWJjr{from{opacity:0;-webkit-transform:translate3d(0,10%,0);-ms-transform:translate3d(0,10%,0);transform:translate3d(0,10%,0);}to{opacity:1;-webkit-transform:none;-ms-transform:none;transform:none;}}",
                    ],
                    "toString": [Function],
                  },
                  " 0.4s ease;animation-fill-mode:both;",
                  ";display:block;}",
                ],
              },
              "displayName": "styles__Container",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styles__Container-kwWyMt",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                null,
                " ",
                "Send Feedback",
              ],
              "className": "",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              null,
              " ",
              "Send Feedback",
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styles__Trigger-jTszNK",
                "isStatic": false,
                "rules": Array [
                  "display:flex;align-items:center;position:absolute;right:0;bottom:0;align-items:center;font-weight:",
                  [Function],
                  ";background:",
                  [Function],
                  ";color:",
                  [Function],
                  ";border:1px solid ",
                  [Function],
                  ";white-space:nowrap;padding:",
                  [Function],
                  ";border-radius:",
                  [Function],
                  ";cursor:pointer;font-size:",
                  [Function],
                  ";box-shadow:",
                  [Function],
                  ";transition:box-shadow 0.3s,transform 0.2s ease-in,color 0.2s;&:hover{box-shadow:",
                  [Function],
                  ";background-color:",
                  [Function],
                  " transform:translateY(-1px);color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}img{margin-right:8px;}",
                ],
              },
              "displayName": "styles__Trigger",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styles__Trigger-jTszNK",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "styles__SlackFeedback-bbGQkf",
            "isStatic": false,
            "rules": Array [
              "position:fixed;font-family:",
              [Function],
              ";z-index:99999998;bottom:12px;right:0;margin:1em;*{box-sizing:border-box;}textarea{min-height:150px;}",
            ],
          },
          "displayName": "styles__SlackFeedback",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "styles__SlackFeedback-bbGQkf",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
